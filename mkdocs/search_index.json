{
    "docs": [
        {
            "location": "/", 
            "text": "Open Stage Control is a libre desktop OSC bi-directionnal control surface application. It's built with HTML, JavaScript \n&\n CSS and run as a Node / \nElectron\n web server that accepts any number of Chrome / Chromium / Electron clients.\n    \n\n\n    \n\n\n    \n\n    \n \n...\n\n    \n Latest release (\n...\n)\n\n    \n Demo (chrome 49+ required)\n\n    \n\n\n\n\n\nFeatures\n\n\n\n\nmultiplatform desktop server application with built-in client interface\n\n\nmouse \n multitouch interfaces compatible with \nChrome 49\n or later\n\n\nall the widgets you need !\n\n\nbuilt-in live editor\n\n\nclients synchronization\n\n\ndeep customization possibilities such as theming and messages filtering\n\n\ntrue\n control over what the widgets send\n\n\nmidi inputs/outputs\n\n\n\n\nSupported platforms\n\n\nThe server can run on all \nplatforms supported by Electron\n. Any client that can run chrome browser can connect to the server.\n\n\nLicense \n credits\n\n\nCopyleft \u00a9 Jean-Emmanuel @\u00a0\nAMMD\n. This program is released under the GNU/GPL3 license.\n\n\nIt relies on the use of several libraries :\n\n\n\n\nNode.js\n\n\nElectron\n\n\nosc.js\n\n\nsocket.io\n\n\nbrowserify\n\n\nexorcist\n\n\nexpress\n\n\nnode-sass\n\n\njQuery\n\n\njQuery-UI\n (draggable, resizable \n sortable)\n\n\nFont Awesome\n\n\nsource-map\n\n\nmathjs\n\n\n\n\nDocumentation\n\n\n\n\n\n\nGetting started\n\n\n\n\nSession File / Tabs\n\n\nInterface / Editor\n\n\nRemote Control\n\n\nTheming\n\n\nMidi\n\n\nCustom Module\n\n\n\n\n\n\n\n\nWidgets Generics\n\n\n\n\nButtons\n\n\nSliders\n\n\nPads\n\n\nContainers\n\n\nMatrices\n\n\nSwitchers\n\n\nPlots\n\n\nMaths", 
            "title": "Home"
        }, 
        {
            "location": "/#features", 
            "text": "multiplatform desktop server application with built-in client interface  mouse   multitouch interfaces compatible with  Chrome 49  or later  all the widgets you need !  built-in live editor  clients synchronization  deep customization possibilities such as theming and messages filtering  true  control over what the widgets send  midi inputs/outputs", 
            "title": "Features"
        }, 
        {
            "location": "/#supported-platforms", 
            "text": "The server can run on all  platforms supported by Electron . Any client that can run chrome browser can connect to the server.", 
            "title": "Supported platforms"
        }, 
        {
            "location": "/#license-credits", 
            "text": "Copyleft \u00a9 Jean-Emmanuel @\u00a0 AMMD . This program is released under the GNU/GPL3 license.  It relies on the use of several libraries :   Node.js  Electron  osc.js  socket.io  browserify  exorcist  express  node-sass  jQuery  jQuery-UI  (draggable, resizable   sortable)  Font Awesome  source-map  mathjs", 
            "title": "License &amp; credits"
        }, 
        {
            "location": "/#documentation", 
            "text": "Getting started   Session File / Tabs  Interface / Editor  Remote Control  Theming  Midi  Custom Module     Widgets Generics   Buttons  Sliders  Pads  Containers  Matrices  Switchers  Plots  Maths", 
            "title": "Documentation"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting started\n\n\n\n\nRun from binaries\n\n\nPrebuilt binaries for Linux, Windows and OS X can be found on the \nrelease\n page.\n\n\nBelow are the available command-line switches. Note that when running without any command-line switch (ie from a file browser), a launcher window will spawn to help setting them.\n\n\nOptions\n\n\n  -s, --sync      synchronized hosts (ip:port pairs) (osc messages sent by widgets will also be sent to these targets)\n  -l, --load      session file to load\n  -b, --blank     load a blank session and start the editor\n  -c, --custom-module  custom module file to load\n  -p, --port      http port of the server (default to 8080)\n  -o, --osc-port  osc input port (default to --port)\n  -m, --midi      midi router settings (requires python-pyo)\n  -d, --debug     log received osc messages in the console\n  -n, --no-gui    disable default gui\n  -g, --gui-only  app server's url. If true, local port (--port) is used\n  -t, --theme     theme name or path (mutliple values allowed)   \n  -e, --examples  list examples instead of recent sessions\n      --disable-vsync  disable gui's vertical synchronization\n      --read-only      disable session editing and session history changes\n\n  -h, --help      display help\n  -v, --version   display version number\n\n\n\n\nExamples\n\n\n\n$ open-stage-control -s 127.0.0.1:5555 127.0.0.1:6666 -p 7777\n\nThis will create an app listening on port 7777 for synchronization messages, and sending its widgets state changes to ports 5555 and 6666.\n\n----\n\n$ open-stage-control -n -l path/to/session.js\n\nThis will create a headless app available through http on port 8080. Multiple clients can use the app (with chrome only) simultaneously, their widgets will be synchronized.\n\n\n\n\n\n\nRun from sources\n\n\nRunning the app from the sources slightly differs from using built binaries : instead of running a binary, we'll launch the app with npm.\n\n\nRequirements\n\n\n\n\nNode.js \n= 4\n\n\nnpm\n\n\n\n\n$ sudo apt-get install nodejs npm  # install nodejs \n npm\n$ sudo npm install -g npm   # update npm\n\n\n\n\nDownload\n\n\n$ git clone https://github.com/jean-emmanuel/open-stage-control\n$ cd open-stage-control/\n$ npm install\n ```\n\n**Run**\n\n```bash\n$ npm start [ -- options]\n\n# A double hyphen (\n--\n) is used here to tell npm that the following options are to be given to the app.\n\n\n\n\n\n\nBuild from sources\n\n\nRequirements\n\n\n\n\nNode.js\n\n\nnpm\n\n\n\n\n$ sudo apt-get install npm  # install nodejs \n npm\n$ sudo npm install -g npm   # update npm\n\n\n\n\nBuild\n\n\n$ git clone https://github.com/jean-emmanuel/open-stage-control\n$ cd open-stage-control\n$ npm install\n$ export PLATFORM=TARGET_PLATFORM # TARGET_PLATFORM can be linux, win32 (windows) or darwin (os x)\n$ export ARCH=TARGET_ARCH         # TARGET_ARCH can be ia32, x64 or armv7l\n$ npm run build\n\n$ # Do the following if you want a deb package for debian/ubuntu\n$ npm run deb32\n$ #\u00a0or\n$ npm run deb64\n$ # or\n$ npm run debarm\n\n\n\n\nThis will build the app in \ndist/open-stage-control-PLATFORM-ARCH\n.\n\n\nPlease note that building the app for windows from a linux system requires wine to be installed.\n\n\n\n\nRunning a true headless server\n\n\nElectron, Open Stage Control's engine, is based on chromium and can't run out of the box without a display server. However, using a virtual framebuffer does the trick. Detailed instructions can be found in Electron's \ndocumentation\n.\n\n\nIn short: install \nxvfb\n and prepend your command with \nxvfb-run\n:  \n\n\nxvfb-run open-stage-control -n", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#run-from-binaries", 
            "text": "Prebuilt binaries for Linux, Windows and OS X can be found on the  release  page.  Below are the available command-line switches. Note that when running without any command-line switch (ie from a file browser), a launcher window will spawn to help setting them.  Options    -s, --sync      synchronized hosts (ip:port pairs) (osc messages sent by widgets will also be sent to these targets)\n  -l, --load      session file to load\n  -b, --blank     load a blank session and start the editor\n  -c, --custom-module  custom module file to load\n  -p, --port      http port of the server (default to 8080)\n  -o, --osc-port  osc input port (default to --port)\n  -m, --midi      midi router settings (requires python-pyo)\n  -d, --debug     log received osc messages in the console\n  -n, --no-gui    disable default gui\n  -g, --gui-only  app server's url. If true, local port (--port) is used\n  -t, --theme     theme name or path (mutliple values allowed)   \n  -e, --examples  list examples instead of recent sessions\n      --disable-vsync  disable gui's vertical synchronization\n      --read-only      disable session editing and session history changes\n\n  -h, --help      display help\n  -v, --version   display version number  Examples  \n$ open-stage-control -s 127.0.0.1:5555 127.0.0.1:6666 -p 7777\n\nThis will create an app listening on port 7777 for synchronization messages, and sending its widgets state changes to ports 5555 and 6666.\n\n----\n\n$ open-stage-control -n -l path/to/session.js\n\nThis will create a headless app available through http on port 8080. Multiple clients can use the app (with chrome only) simultaneously, their widgets will be synchronized.", 
            "title": "Run from binaries"
        }, 
        {
            "location": "/getting-started/#run-from-sources", 
            "text": "Running the app from the sources slightly differs from using built binaries : instead of running a binary, we'll launch the app with npm.  Requirements   Node.js  = 4  npm   $ sudo apt-get install nodejs npm  # install nodejs   npm\n$ sudo npm install -g npm   # update npm  Download  $ git clone https://github.com/jean-emmanuel/open-stage-control\n$ cd open-stage-control/\n$ npm install\n ```\n\n**Run**\n\n```bash\n$ npm start [ -- options]\n\n# A double hyphen ( -- ) is used here to tell npm that the following options are to be given to the app.", 
            "title": "Run from sources"
        }, 
        {
            "location": "/getting-started/#build-from-sources", 
            "text": "Requirements   Node.js  npm   $ sudo apt-get install npm  # install nodejs   npm\n$ sudo npm install -g npm   # update npm  Build  $ git clone https://github.com/jean-emmanuel/open-stage-control\n$ cd open-stage-control\n$ npm install\n$ export PLATFORM=TARGET_PLATFORM # TARGET_PLATFORM can be linux, win32 (windows) or darwin (os x)\n$ export ARCH=TARGET_ARCH         # TARGET_ARCH can be ia32, x64 or armv7l\n$ npm run build\n\n$ # Do the following if you want a deb package for debian/ubuntu\n$ npm run deb32\n$ #\u00a0or\n$ npm run deb64\n$ # or\n$ npm run debarm  This will build the app in  dist/open-stage-control-PLATFORM-ARCH .  Please note that building the app for windows from a linux system requires wine to be installed.", 
            "title": "Build from sources"
        }, 
        {
            "location": "/getting-started/#running-a-true-headless-server", 
            "text": "Electron, Open Stage Control's engine, is based on chromium and can't run out of the box without a display server. However, using a virtual framebuffer does the trick. Detailed instructions can be found in Electron's  documentation .  In short: install  xvfb  and prepend your command with  xvfb-run :    xvfb-run open-stage-control -n", 
            "title": "Running a true headless server"
        }, 
        {
            "location": "/user-guide/custom-module/", 
            "text": "Custom module\n\n\nUsing the \n-c / --custom-module\n command-line switch, users can load a javascript file to tune the way Open Stage Control behaves regarding osc.\n\n\nIt must be of the following form:\n\n\n(function(){\n\n    // Do whatever you want, initialize some variables, declare some functions, ...\n\n    return {\n        init: function(){\n            // this will be executed once when the osc server starts\n        },\n        oscInFilter:function(data){\n            // Filter incomming osc messages\n\n            var {address, args, host, port} = data\n\n            // do what you want\n\n            // address = string\n            // args = array of {value, type} objects\n            // host = string\n            // port = integer\n\n            // return data if you want the message to be processed\n            return {address, args, host, port}\n\n        },\n        oscOutFilter:function(data){\n            // Filter outgoing osc messages\n\n            // same as oscInFilter\n\n            // return data if you want the message to be and sent\n            return {address, args, host, port}\n        }\n    }\n\n})()\n\n\n\n\n\nThe module is executed in a restricted context, only a few globals areh available :\n\n\n\n\nconsole\n: \nobject\n\n\nsendOsc\n: \nfunction({address, args, host, port})\n\n\nreceiveOsc\n: \nfunction({address, args, host, port})\n\n\nsetTimeout\n: \nfunction(function, delay)\n\n\n\n\nsendOsc\n and \nreceiveOsc\n expect arguments formatted as follow:\n\n\n\n\naddress\n: \nstring\n\n\nargs\n: \narray\n of \n{type:\"OSC_TYPE_LETTER\", value:VALUE}\n \nobjects\n\n\nhost\n: \nstring\n ip address, valid hostname or \nmidi\n\n\nport\n: \ninteger\n port number or \nstring\n midi device name", 
            "title": "Custom module"
        }, 
        {
            "location": "/user-guide/custom-module/#custom-module", 
            "text": "Using the  -c / --custom-module  command-line switch, users can load a javascript file to tune the way Open Stage Control behaves regarding osc.  It must be of the following form:  (function(){\n\n    // Do whatever you want, initialize some variables, declare some functions, ...\n\n    return {\n        init: function(){\n            // this will be executed once when the osc server starts\n        },\n        oscInFilter:function(data){\n            // Filter incomming osc messages\n\n            var {address, args, host, port} = data\n\n            // do what you want\n\n            // address = string\n            // args = array of {value, type} objects\n            // host = string\n            // port = integer\n\n            // return data if you want the message to be processed\n            return {address, args, host, port}\n\n        },\n        oscOutFilter:function(data){\n            // Filter outgoing osc messages\n\n            // same as oscInFilter\n\n            // return data if you want the message to be and sent\n            return {address, args, host, port}\n        }\n    }\n\n})()  The module is executed in a restricted context, only a few globals areh available :   console :  object  sendOsc :  function({address, args, host, port})  receiveOsc :  function({address, args, host, port})  setTimeout :  function(function, delay)   sendOsc  and  receiveOsc  expect arguments formatted as follow:   address :  string  args :  array  of  {type:\"OSC_TYPE_LETTER\", value:VALUE}   objects  host :  string  ip address, valid hostname or  midi  port :  integer  port number or  string  midi device name", 
            "title": "Custom module"
        }, 
        {
            "location": "/user-guide/interface/", 
            "text": "User interface\n\n\n\n\nURL Options\n\n\nClient specific options can be set by adding query parameters to the server's url. One must prepend the url with a question mark (\n?\n) followed by \nparameter=value\n pairs separated with ampersands (\n).\n\n\nSupported options:\n\n\n\n\nhdpi=1\n: enable high resolution canvas\n\n\n\n\nExample:\n\n\nhttp://server-ip:port?hdpi=1\n\n\nInteraction events\n\n\nClick / Tap\n\n\nClick / Tap events are handled at pressing time, not releasing.\n\n\nRight-click / Long touch\n\n\nWidgets that have only one value input will give focus to it when receiving this event. When the editor is enabled, Right-click / Long touch spawns the editor's context menu.\n\n\nDrag\n\n\nThe widgets respond to mouse and touch drag gestures with a 1:1 precision ratio. By using two or more fingers, one can obtain higher precision gestures : each finger that touches the widget without moving will slow down the moving one.\n\n\n\n\nEditor\n\n\nThe session editor can be enabled in the side panel. Once enabled, clicking on a widget or on a tab will make it the \nselected object\n, adding a fancy dashed blue border to it.\n\n\nProperties\n\n\nAll the selected object's properties are displayed and can be modified in the side panel. Any modification will redraw the object \nand all its children\n if the submitted data is valid. Please refer to the \nwidgets reference\n for the list of valid options.\n\n\nWidgets containers such as tabs, strips and panels will also list their children here, which can be reordered using drag-and-drop.\n\n\nSize / Position\n\n\nThe selected object can be resized using its south, south-east and east handles. It can be dragged with its north-west handle.\n\n\nGrid\n\n\nBy default, widget resizing / dragging snaps to a 10 pixel wide grid. Its width can be customized in the editor (when its enabled). Setting its width to 1 will disable it. Note that the grid doesn't affect manual setting of a widget's size / position.\n\n\nContext menu\n\n\nRight clicking / long touch on a widget or on a tab will also display a context menu providing useful utilities :\n\n\n\n\ncopy\n: copy widget's data\n\n\ncut\n: copy widget's data and delete selected widget\n\n\npaste\n: paste copied widget in selected container\n\n\nn+1\n : increments the id of the copied widget (and all its children) before pasting\n\n\nclone\n : paste the exact same widget\n\n\nAdd widget\n: create a new widget in selected container\n\n\nAdd tab\n: create a new tab in selected container\n\n\nDelete\n: delete selected tab or widget", 
            "title": "Interface"
        }, 
        {
            "location": "/user-guide/interface/#user-interface", 
            "text": "", 
            "title": "User interface"
        }, 
        {
            "location": "/user-guide/interface/#url-options", 
            "text": "Client specific options can be set by adding query parameters to the server's url. One must prepend the url with a question mark ( ? ) followed by  parameter=value  pairs separated with ampersands ( ).  Supported options:   hdpi=1 : enable high resolution canvas   Example:  http://server-ip:port?hdpi=1", 
            "title": "URL Options"
        }, 
        {
            "location": "/user-guide/interface/#interaction-events", 
            "text": "", 
            "title": "Interaction events"
        }, 
        {
            "location": "/user-guide/interface/#click-tap", 
            "text": "Click / Tap events are handled at pressing time, not releasing.", 
            "title": "Click / Tap"
        }, 
        {
            "location": "/user-guide/interface/#right-click-long-touch", 
            "text": "Widgets that have only one value input will give focus to it when receiving this event. When the editor is enabled, Right-click / Long touch spawns the editor's context menu.", 
            "title": "Right-click / Long touch"
        }, 
        {
            "location": "/user-guide/interface/#drag", 
            "text": "The widgets respond to mouse and touch drag gestures with a 1:1 precision ratio. By using two or more fingers, one can obtain higher precision gestures : each finger that touches the widget without moving will slow down the moving one.", 
            "title": "Drag"
        }, 
        {
            "location": "/user-guide/interface/#editor", 
            "text": "The session editor can be enabled in the side panel. Once enabled, clicking on a widget or on a tab will make it the  selected object , adding a fancy dashed blue border to it.", 
            "title": "Editor"
        }, 
        {
            "location": "/user-guide/interface/#properties", 
            "text": "All the selected object's properties are displayed and can be modified in the side panel. Any modification will redraw the object  and all its children  if the submitted data is valid. Please refer to the  widgets reference  for the list of valid options.  Widgets containers such as tabs, strips and panels will also list their children here, which can be reordered using drag-and-drop.", 
            "title": "Properties"
        }, 
        {
            "location": "/user-guide/interface/#size-position", 
            "text": "The selected object can be resized using its south, south-east and east handles. It can be dragged with its north-west handle.", 
            "title": "Size / Position"
        }, 
        {
            "location": "/user-guide/interface/#grid", 
            "text": "By default, widget resizing / dragging snaps to a 10 pixel wide grid. Its width can be customized in the editor (when its enabled). Setting its width to 1 will disable it. Note that the grid doesn't affect manual setting of a widget's size / position.", 
            "title": "Grid"
        }, 
        {
            "location": "/user-guide/interface/#context-menu", 
            "text": "Right clicking / long touch on a widget or on a tab will also display a context menu providing useful utilities :   copy : copy widget's data  cut : copy widget's data and delete selected widget  paste : paste copied widget in selected container  n+1  : increments the id of the copied widget (and all its children) before pasting  clone  : paste the exact same widget  Add widget : create a new widget in selected container  Add tab : create a new tab in selected container  Delete : delete selected tab or widget", 
            "title": "Context menu"
        }, 
        {
            "location": "/user-guide/midi/", 
            "text": "Sending / Receiving MIDI\n\n\nOpen Stage Control can send and receive midi messages using pyo / portmidi.\n\n\nRequirements\n\n\nMIDI support requires additionnal softwares to be installed on the server's system:\n\n\n\n\npython 2.7\n\n\npyo\n \n= 0.8.3\n\n\n\n\nWhy an additionnal dependency ?\n\n\nProviding cross-platform midi support is not trivial, as it requires os-specific compilations that cannot be automated within Open Stage Control's current packaging workflow. Using a python addon seems the best compromise so far : the core app remains easy to build, and the extra dependency is easy to install.\n\n\nNote: \npyo\n doesn't support Windows 64bit.\n\n\nSetup\n\n\nWhen running the app, the \n-m / -midi\n switch must be set; it accepts the following arguments (separated by spaces):\n\n\n\n\nlist\n: prints the available midi inputs / outputs\n\n\ndevice_name:input,output\n, where:\n\n\ndevice_name\n\n\ninput\n is the midi input number (midi message sent to open-stage-control)\n\n\noutput\n is the midi output number (midi message sent from open-stage-control)\n\n\n\n\n\n\n\n\nLinux only\n\n\n\n\ndevice_name:virtual\n: (requires \nmididings\n to be installed) creates a virtual midi device called 'Open Stage Control' with the following ports :\n\n\n_virtual_loopback_x\n: used internally, don't connect anything to it.\n\n\ndevice_name_in\n: virtual midi input\n\n\ndevice_name_out\n: virtual midi output\n\n\n\n\n\n\n\n\nMultiple devices can be declared (multiple virtual devices as well).\n\n\nWidget settings\n\n\nIn order to send midi messages, a widget must have at least one \ntarget\n formatted as follow;  \n\n\nmidi:device_name\n (where \ndevice_name\n is one of the declared midi devices (see previous section))\n\n\nSupported commands\n\n\nHere are the supported commands. One must use the \npreArgs\n option to make sure the correct number of arguments is sent.\n\n\n\n\n\n\n\n\naddress\n\n\nargs\n\n\nnote\n\n\n\n\n\n\n\n\n\n\n/note\n\n\nchannel note velocity\n\n\n(if \nvelocity\n is \n0\n, a \nnote off\n will be sent)\n\n\n\n\n\n\n/control\n\n\nchannel cc   value\n\n\n\n\n\n\n\n\n/program\n\n\nchannel program\n\n\n\n\n\n\n\n\n/pitch\n\n\nchannel LSB MSB\n\n\n\n\n\n\n\n\n\n\n\n\nchannel\n is an integer between 1 and 16\n\n\n\u01f9ote\n, \nvelocity\n, \ncc\n, \nvalue\n, \nprogram\n, \nLSB\n,\nMSB\n are integers between 0 and 127", 
            "title": "Midi"
        }, 
        {
            "location": "/user-guide/midi/#sending-receiving-midi", 
            "text": "Open Stage Control can send and receive midi messages using pyo / portmidi.", 
            "title": "Sending / Receiving MIDI"
        }, 
        {
            "location": "/user-guide/midi/#requirements", 
            "text": "MIDI support requires additionnal softwares to be installed on the server's system:   python 2.7  pyo   = 0.8.3   Why an additionnal dependency ?  Providing cross-platform midi support is not trivial, as it requires os-specific compilations that cannot be automated within Open Stage Control's current packaging workflow. Using a python addon seems the best compromise so far : the core app remains easy to build, and the extra dependency is easy to install.  Note:  pyo  doesn't support Windows 64bit.", 
            "title": "Requirements"
        }, 
        {
            "location": "/user-guide/midi/#setup", 
            "text": "When running the app, the  -m / -midi  switch must be set; it accepts the following arguments (separated by spaces):   list : prints the available midi inputs / outputs  device_name:input,output , where:  device_name  input  is the midi input number (midi message sent to open-stage-control)  output  is the midi output number (midi message sent from open-stage-control)     Linux only   device_name:virtual : (requires  mididings  to be installed) creates a virtual midi device called 'Open Stage Control' with the following ports :  _virtual_loopback_x : used internally, don't connect anything to it.  device_name_in : virtual midi input  device_name_out : virtual midi output     Multiple devices can be declared (multiple virtual devices as well).", 
            "title": "Setup"
        }, 
        {
            "location": "/user-guide/midi/#widget-settings", 
            "text": "In order to send midi messages, a widget must have at least one  target  formatted as follow;    midi:device_name  (where  device_name  is one of the declared midi devices (see previous section))", 
            "title": "Widget settings"
        }, 
        {
            "location": "/user-guide/midi/#supported-commands", 
            "text": "Here are the supported commands. One must use the  preArgs  option to make sure the correct number of arguments is sent.     address  args  note      /note  channel note velocity  (if  velocity  is  0 , a  note off  will be sent)    /control  channel cc   value     /program  channel program     /pitch  channel LSB MSB       channel  is an integer between 1 and 16  \u01f9ote ,  velocity ,  cc ,  value ,  program ,  LSB , MSB  are integers between 0 and 127", 
            "title": "Supported commands"
        }, 
        {
            "location": "/user-guide/remote-control/", 
            "text": "Remote control\n\n\nAll widgets that send osc messages respond to the same messages. Additionnaly, Open Stage Control responds to some general osc commands.\n\n\n/EDIT id options\n\n\nApply a set of options to an existing widget by replacing the old ones with the new ones.\n\n\n\n\nid\n: \nstring\n, widget's \nid\n\n\noptions\n: \nstring\n, JSON object defining the new properties to merge\n\n\nexample: \n{\"label\":\"New Label\", \"color\":\"red\"}\n\n\n\n\nEditing a widget can be cpu expensive, hence updating the UI continuously is not a good idea.\n\n\n/EDIT_SOFT id options\n\n\nApply a set of options to an existing widget by merging them to the widget's options.  \n\n\n\n\nid\n: \nstring\n, widget's \nid\n\n\noptions\n: \nstring\n, JSON object defining the new properties to merge\n\n\nexample: \n{\"label\":\"New Label\", \"color\":\"red\"}\n\n\n\n\nEditing a widget can be cpu expensive, hence updating the UI continuously is not a good idea.\n\n\n/TABS id id etc\n\n\nOpen the tabs designated by the \nid\n parameters. The target tab link must be accesible (opening a tab located in a disabled tab won't work unless you specify the parent tab's \nid\n before; the safest way to go is to pass the whole tab tree to enable).", 
            "title": "Remote control"
        }, 
        {
            "location": "/user-guide/remote-control/#remote-control", 
            "text": "All widgets that send osc messages respond to the same messages. Additionnaly, Open Stage Control responds to some general osc commands.", 
            "title": "Remote control"
        }, 
        {
            "location": "/user-guide/remote-control/#edit-id-options", 
            "text": "Apply a set of options to an existing widget by replacing the old ones with the new ones.   id :  string , widget's  id  options :  string , JSON object defining the new properties to merge  example:  {\"label\":\"New Label\", \"color\":\"red\"}   Editing a widget can be cpu expensive, hence updating the UI continuously is not a good idea.", 
            "title": "/EDIT id options"
        }, 
        {
            "location": "/user-guide/remote-control/#edit_soft-id-options", 
            "text": "Apply a set of options to an existing widget by merging them to the widget's options.     id :  string , widget's  id  options :  string , JSON object defining the new properties to merge  example:  {\"label\":\"New Label\", \"color\":\"red\"}   Editing a widget can be cpu expensive, hence updating the UI continuously is not a good idea.", 
            "title": "/EDIT_SOFT id options"
        }, 
        {
            "location": "/user-guide/remote-control/#tabs-id-id-etc", 
            "text": "Open the tabs designated by the  id  parameters. The target tab link must be accesible (opening a tab located in a disabled tab won't work unless you specify the parent tab's  id  before; the safest way to go is to pass the whole tab tree to enable).", 
            "title": "/TABS id id etc"
        }, 
        {
            "location": "/user-guide/session-file/", 
            "text": "Session file\n\n\nA valid session file is a javascript file that returns an array of \ntab objects\n. It can be written as a javascript \narray\n :\n\n\n[// array\n    {// tab object\n        label:\nA tab containing widgets\n,\n        widgets: [// array\n            {// widget object\n                // widget properties\n            },\n            {\n                // etc\n            }\n        ]\n    },\n    {\n        label:\nA tab containing tabs\n,\n        tabs: [\n            {// tab object\n                // tab properties\n            },\n            {\n                // etc\n            }\n        ]\n    },\n    {\n        // tab properties\n    }\n]\n\n\n\n\nIt can also be a javascript self invoking function that returns an array of \ntab objects\n :\n\n\n(function(){\n    var tabs = []\n    for (for i in [0,1,2,3]) {\n        tabs.push({\n            id:'tab'+i,\n            widgets:\u00a0[\n                {\n                    id:'tab'+i+'fader',\n                    type:'fader'\n                }\n                // etc\n            ]\n        })\n    }\n    return tabs\n}()\n\n\n\n\n\n\n\nTab object\n\n\nA tab object is a javascript object which properties are described below.\n\n\n{\n    // tab properties\n}\n\n\n\n\nlabel\n\n\n\n\ntype: \nstring\n\n\ndefault: \nUnnamed\n\n\n\n\nid\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: this is only useful for \nremote controlling\n the tabs states.\n\n\n\n\nwidgets\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage: each element of the \narray\n must be a \nwidget\n object. A tab cannot contain widgets and tabs simultaneously.\n\n\n\n\ntabs\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage: each element of the \narray\n must be a \ntab\n object. A tab cannot contain widgets and tabs simultaneously.", 
            "title": "Session file"
        }, 
        {
            "location": "/user-guide/session-file/#session-file", 
            "text": "A valid session file is a javascript file that returns an array of  tab objects . It can be written as a javascript  array  :  [// array\n    {// tab object\n        label: A tab containing widgets ,\n        widgets: [// array\n            {// widget object\n                // widget properties\n            },\n            {\n                // etc\n            }\n        ]\n    },\n    {\n        label: A tab containing tabs ,\n        tabs: [\n            {// tab object\n                // tab properties\n            },\n            {\n                // etc\n            }\n        ]\n    },\n    {\n        // tab properties\n    }\n]  It can also be a javascript self invoking function that returns an array of  tab objects  :  (function(){\n    var tabs = []\n    for (for i in [0,1,2,3]) {\n        tabs.push({\n            id:'tab'+i,\n            widgets:\u00a0[\n                {\n                    id:'tab'+i+'fader',\n                    type:'fader'\n                }\n                // etc\n            ]\n        })\n    }\n    return tabs\n}()", 
            "title": "Session file"
        }, 
        {
            "location": "/user-guide/session-file/#tab-object", 
            "text": "A tab object is a javascript object which properties are described below.  {\n    // tab properties\n}", 
            "title": "Tab object"
        }, 
        {
            "location": "/user-guide/session-file/#label", 
            "text": "type:  string  default:  Unnamed", 
            "title": "label"
        }, 
        {
            "location": "/user-guide/session-file/#id", 
            "text": "type:  string  default:  empty  usage: this is only useful for  remote controlling  the tabs states.", 
            "title": "id"
        }, 
        {
            "location": "/user-guide/session-file/#widgets", 
            "text": "type:  array  default:  []  usage: each element of the  array  must be a  widget  object. A tab cannot contain widgets and tabs simultaneously.", 
            "title": "widgets"
        }, 
        {
            "location": "/user-guide/session-file/#tabs", 
            "text": "type:  array  default:  []  usage: each element of the  array  must be a  tab  object. A tab cannot contain widgets and tabs simultaneously.", 
            "title": "tabs"
        }, 
        {
            "location": "/user-guide/theming/", 
            "text": "Theming\n\n\nTheming is as simple as writing a tiny css file that will override the default style variables defined in \n_vars.scss\n :\n\n\n:root {\n    --color-accent:red;\n}\n\n\n\n\nThis will change the default accent color to red. Variables can also be overridden for a specific subset of elements, for example :\n\n\n.panel-container {\n    --color-text:blue;\n}\n\n\n\n\nThis will change the default text color to blue for all elements in panel widgets.\n\n\nOf course, regular css is also allowed :\n\n\n.widget .input {\n    display: none;\n}\n\n\n\n\nThis will hide the widgets' value inputs.", 
            "title": "Theming"
        }, 
        {
            "location": "/user-guide/theming/#theming", 
            "text": "Theming is as simple as writing a tiny css file that will override the default style variables defined in  _vars.scss  :  :root {\n    --color-accent:red;\n}  This will change the default accent color to red. Variables can also be overridden for a specific subset of elements, for example :  .panel-container {\n    --color-text:blue;\n}  This will change the default text color to blue for all elements in panel widgets.  Of course, regular css is also allowed :  .widget .input {\n    display: none;\n}  This will hide the widgets' value inputs.", 
            "title": "Theming"
        }, 
        {
            "location": "/user-guide/widgets-generics/", 
            "text": "Widgets generics\n\n\nA widget object is a javascript object. All widgets share a set of generic properties described below. Each widget type comes with an additional set of specific properties which are documented in these pages:\n\n\n\n\nSliders\n\n\nButtons\n\n\nPads\n\n\nMatrices\n\n\nPlots\n\n\nContainers\n\n\nSwitchers\n\n\nMaths\n\n\n\n\n{\n    // widget properties\n}\n\n\n\n\n\n\nBasics\n\n\ntype\n\n\n\n\ntype: \nstring\n\n\ndefault: \nfader\n\n\n\n\nid\n\n\n\n\ntype: \nstring\n\n\ndefault: generated unique 'widget_n'\n\n\nusage: widgets sharing the same \nid\n will act as clones and update each other's value(s) without sending extra osc messages.\n\n\n\n\nlinkId\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: widgets sharing the same \nlinkId\n update each other's value(s) AND send their respective osc messages.\n\n\n\n\n\n\nStyle\n\n\nlabel\n\n\n\n\ntype: \nstring|false\n\n\ndefault: \nauto\n, which displays \nid\n\n\nusage:\n\n\nset to \nfalse\n to hide completely\n\n\ninsert icons from \nFontAwesome\n using the prefix \n^\n followed by the icon's name : \nmade with ^heart\n, etc\n\n\n\n\n\n\n\n\ntop\n / \nleft\n\n\n\n\ntype: \nnumber|percentage\n\n\ndefault: \nauto\n\n\nusage:\n\n\nwhen both \ntop\n and \nleft\n are set to \nauto\n, the widget is positioned according to the normal flow of the page (from left to right, by order of creation).\n\n\notherwise, the widget will be absolutely positioned\n\n\n\n\n\n\n\n\nwidth\n / \nheight\n\n\n\n\ntype: \nnumber|percentage\n\n\ndefault: \nauto\n\n\n\n\ncolor\n\n\n\n\ntype: \nstring\n\n\ndefault: \nauto\n, inherited accent color\n\n\nusage: any valid \ncss\n color code is valid, this will change the default accent color for the widget and all its children\n\n\n\n\ncss\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: the \ncss\n property can be used to override inherited \ntheming\n variables. Also, some widgets expose specific theming variables that allow a finer customization. Standard \ncss\n properties can be applied to the widget's root element through this property, \ncss\n selectors can also be used apply custom styles to the widget's children.\n\n\nexamples:\n\n\nborder-radius:5rem; .label\u00a0{font-size: 20rem}\n will round the widget's corners and increase its label's font-size and all its children's labels'\n\n\nborder-radius:5rem; \n .label\u00a0{font-size: 20rem}\n will round the widget's corners and increase its label's font-size (the \n selector targets only the direct children of the widget element)\n\n\n\n\n\n\n\n\n\n\nOSC\n\n\nvalue\n\n\n\n\ntype: \n*\n\n\ndefault: \nempty\n\n\nusage: if set, the widget will be initialized with this \nvalue\n. This won't affect linked widgets and won't send any osc message.\n\n\nnote: its \ntype\n must match the widget's value type (ie a \nnumber\n for sliders, an \narray\n for pads, etc). \nChanges made to \nvalue\n won't be visible until the session is reloaded.\n\n\n\n\nprecision\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n2\n\n\nusage: the \nprecision\n property defines the number of decimals to display and to send. Set to \n0\n to send \nintegers\n only.\n\n\n\n\ntarget\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage:\n\n\nthis defines the targets of the widget's osc messages\n\n\neach element of the \narray\n must be a string formatted as follows : \n\"ip:port\"\n\n\nmultiple targets can be specified : \n[\"ip1:port1\",\"ip2:port2\"]\n\n\nif no target is set, messages can still be sent if the server has synchronized hosts (\n-s / --sync\n)\n\n\nif \nmidi\n is enabled, targets can be \n\"midi:device_name\"\n\n\n\n\n\n\n\n\naddress\n\n\n\n\ntype: \nstring\n\n\ndefault: \n/widgets_id\n\n\nusage: this is the \naddress\n of the osc messages sent by the widget, it must start with a \n/\n\n\n\n\ntouchAddress\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: sliders and pads can send special osc messages to inform weither they are currently touched or not. The osc message will be of the following form :\n\n\n\n\n    /touch/address [preArgs] 0/1\n\n\n\n\npreArgs\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage:\n\n\neach element of the \narray\n defines a constant value that will be prepended to the osc message\n\n\nvalues can be defined as objects if the type needs to be specified (ie different from the default implied by the \nprecision\n)\n\n\n\n\n\n\nexample:\n\n\n\n\npreArgs: [\n    \n1\n,        // this will always be sent as a string\n    0.5,        // this will be sent as an integer if precision equals 0\n    1,          // this will be sent as float if precision is different from 0\n    {\n        type:\nf\n,\n        value:0.5\n    },\n    {\n        type:\ni\n,\n        value:1\n    },\n    {\n        type:\nT\n,\n        value:true\n    },\n    {\n        type:\nF\n,\n        value:false\n    }\n]", 
            "title": "Widgets generics"
        }, 
        {
            "location": "/user-guide/widgets-generics/#widgets-generics", 
            "text": "A widget object is a javascript object. All widgets share a set of generic properties described below. Each widget type comes with an additional set of specific properties which are documented in these pages:   Sliders  Buttons  Pads  Matrices  Plots  Containers  Switchers  Maths   {\n    // widget properties\n}", 
            "title": "Widgets generics"
        }, 
        {
            "location": "/user-guide/widgets-generics/#basics", 
            "text": "", 
            "title": "Basics"
        }, 
        {
            "location": "/user-guide/widgets-generics/#type", 
            "text": "type:  string  default:  fader", 
            "title": "type"
        }, 
        {
            "location": "/user-guide/widgets-generics/#id", 
            "text": "type:  string  default: generated unique 'widget_n'  usage: widgets sharing the same  id  will act as clones and update each other's value(s) without sending extra osc messages.", 
            "title": "id"
        }, 
        {
            "location": "/user-guide/widgets-generics/#linkid", 
            "text": "type:  string  default:  empty  usage: widgets sharing the same  linkId  update each other's value(s) AND send their respective osc messages.", 
            "title": "linkId"
        }, 
        {
            "location": "/user-guide/widgets-generics/#style", 
            "text": "", 
            "title": "Style"
        }, 
        {
            "location": "/user-guide/widgets-generics/#label", 
            "text": "type:  string|false  default:  auto , which displays  id  usage:  set to  false  to hide completely  insert icons from  FontAwesome  using the prefix  ^  followed by the icon's name :  made with ^heart , etc", 
            "title": "label"
        }, 
        {
            "location": "/user-guide/widgets-generics/#top-left", 
            "text": "type:  number|percentage  default:  auto  usage:  when both  top  and  left  are set to  auto , the widget is positioned according to the normal flow of the page (from left to right, by order of creation).  otherwise, the widget will be absolutely positioned", 
            "title": "top / left"
        }, 
        {
            "location": "/user-guide/widgets-generics/#width-height", 
            "text": "type:  number|percentage  default:  auto", 
            "title": "width / height"
        }, 
        {
            "location": "/user-guide/widgets-generics/#color", 
            "text": "type:  string  default:  auto , inherited accent color  usage: any valid  css  color code is valid, this will change the default accent color for the widget and all its children", 
            "title": "color"
        }, 
        {
            "location": "/user-guide/widgets-generics/#css", 
            "text": "type:  string  default:  empty  usage: the  css  property can be used to override inherited  theming  variables. Also, some widgets expose specific theming variables that allow a finer customization. Standard  css  properties can be applied to the widget's root element through this property,  css  selectors can also be used apply custom styles to the widget's children.  examples:  border-radius:5rem; .label\u00a0{font-size: 20rem}  will round the widget's corners and increase its label's font-size and all its children's labels'  border-radius:5rem;   .label\u00a0{font-size: 20rem}  will round the widget's corners and increase its label's font-size (the   selector targets only the direct children of the widget element)", 
            "title": "css"
        }, 
        {
            "location": "/user-guide/widgets-generics/#osc", 
            "text": "", 
            "title": "OSC"
        }, 
        {
            "location": "/user-guide/widgets-generics/#value", 
            "text": "type:  *  default:  empty  usage: if set, the widget will be initialized with this  value . This won't affect linked widgets and won't send any osc message.  note: its  type  must match the widget's value type (ie a  number  for sliders, an  array  for pads, etc).  Changes made to  value  won't be visible until the session is reloaded.", 
            "title": "value"
        }, 
        {
            "location": "/user-guide/widgets-generics/#precision", 
            "text": "type:  integer  default:  2  usage: the  precision  property defines the number of decimals to display and to send. Set to  0  to send  integers  only.", 
            "title": "precision"
        }, 
        {
            "location": "/user-guide/widgets-generics/#target", 
            "text": "type:  array  default:  []  usage:  this defines the targets of the widget's osc messages  each element of the  array  must be a string formatted as follows :  \"ip:port\"  multiple targets can be specified :  [\"ip1:port1\",\"ip2:port2\"]  if no target is set, messages can still be sent if the server has synchronized hosts ( -s / --sync )  if  midi  is enabled, targets can be  \"midi:device_name\"", 
            "title": "target"
        }, 
        {
            "location": "/user-guide/widgets-generics/#address", 
            "text": "type:  string  default:  /widgets_id  usage: this is the  address  of the osc messages sent by the widget, it must start with a  /", 
            "title": "address"
        }, 
        {
            "location": "/user-guide/widgets-generics/#touchaddress", 
            "text": "type:  string  default:  empty  usage: sliders and pads can send special osc messages to inform weither they are currently touched or not. The osc message will be of the following form :       /touch/address [preArgs] 0/1", 
            "title": "touchAddress"
        }, 
        {
            "location": "/user-guide/widgets-generics/#preargs", 
            "text": "type:  array  default:  []  usage:  each element of the  array  defines a constant value that will be prepended to the osc message  values can be defined as objects if the type needs to be specified (ie different from the default implied by the  precision )    example:   preArgs: [\n     1 ,        // this will always be sent as a string\n    0.5,        // this will be sent as an integer if precision equals 0\n    1,          // this will be sent as float if precision is different from 0\n    {\n        type: f ,\n        value:0.5\n    },\n    {\n        type: i ,\n        value:1\n    },\n    {\n        type: T ,\n        value:true\n    },\n    {\n        type: F ,\n        value:false\n    }\n]", 
            "title": "preArgs"
        }, 
        {
            "location": "/user-guide/widgets-specifics/buttons/", 
            "text": "Buttons\n\n\nButtons are exactly what you think they are.\n\n\n\n\nToggle\n\n\n{\n    type:'toggle',\n    // etc\n}\n\n\n\n\non\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \n1\n\n\nusage: defines which value is sent on \non\n position\n\n\nset to \nnull\n to send send no argument in the osc message\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\noff\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \n0\n\n\nusage: defines which value is sent on \noff\n position\n\n\nset to \nnull\n to send send no argument in the osc message\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\n\n\nPush\n\n\n{\n    type:'push',\n    // etc\n}\n\n\n\n\non\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \n1\n\n\nusage: defines which value is sent when pushing the button\n\n\nset to \nnull\n to send send no argument in the osc message\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\noff\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \n0\n\n\nusage: defines which value is sent when releasing the button\n\n\nset to \nnull\n to send send no argument in the osc message\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\nnorelease\n\n\n\n\ntype: \nbool\n\n\ndefault: \nfalse\n\n\nusage: set to true to prevent sending any osc message when releasing the button\n\n\n\n\nSetting the \npush\n's value externally (via osc) will toggle it's inner light.\n\n\n\n\nSwitch\n\n\n{\n    type:'switch',\n    // etc\n}\n\n\n\n\nvalues\n\n\n\n\ntype: \narray|object\n\n\ndefault: \n{\"Value 1\":1,\"Value 2\":2}\n\n\nusage:\n\n\narray\n of possible values to switch between : \n[1,2,3]\n\n\nobject\n of \n\"label\":value\n pairs", 
            "title": "Buttons"
        }, 
        {
            "location": "/user-guide/widgets-specifics/buttons/#buttons", 
            "text": "Buttons are exactly what you think they are.", 
            "title": "Buttons"
        }, 
        {
            "location": "/user-guide/widgets-specifics/buttons/#toggle", 
            "text": "{\n    type:'toggle',\n    // etc\n}", 
            "title": "Toggle"
        }, 
        {
            "location": "/user-guide/widgets-specifics/buttons/#on", 
            "text": "type:  string|number|object  default:  1  usage: defines which value is sent on  on  position  set to  null  to send send no argument in the osc message  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "on"
        }, 
        {
            "location": "/user-guide/widgets-specifics/buttons/#off", 
            "text": "type:  string|number|object  default:  0  usage: defines which value is sent on  off  position  set to  null  to send send no argument in the osc message  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "off"
        }, 
        {
            "location": "/user-guide/widgets-specifics/buttons/#push", 
            "text": "{\n    type:'push',\n    // etc\n}", 
            "title": "Push"
        }, 
        {
            "location": "/user-guide/widgets-specifics/buttons/#on_1", 
            "text": "type:  string|number|object  default:  1  usage: defines which value is sent when pushing the button  set to  null  to send send no argument in the osc message  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "on"
        }, 
        {
            "location": "/user-guide/widgets-specifics/buttons/#off_1", 
            "text": "type:  string|number|object  default:  0  usage: defines which value is sent when releasing the button  set to  null  to send send no argument in the osc message  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "off"
        }, 
        {
            "location": "/user-guide/widgets-specifics/buttons/#norelease", 
            "text": "type:  bool  default:  false  usage: set to true to prevent sending any osc message when releasing the button   Setting the  push 's value externally (via osc) will toggle it's inner light.", 
            "title": "norelease"
        }, 
        {
            "location": "/user-guide/widgets-specifics/buttons/#switch", 
            "text": "{\n    type:'switch',\n    // etc\n}", 
            "title": "Switch"
        }, 
        {
            "location": "/user-guide/widgets-specifics/buttons/#values", 
            "text": "type:  array|object  default:  {\"Value 1\":1,\"Value 2\":2}  usage:  array  of possible values to switch between :  [1,2,3]  object  of  \"label\":value  pairs", 
            "title": "values"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/", 
            "text": "Containers\n\n\nContainers can contain any widgets\n\n\n\n\nStrip\n\n\nStrips can contain any number of widgets, which can't be absolutely positioned and whose size can't overflow their parent's.\n\n\n{\n    type:'strip',\n    // etc\n}\n\n\n\n\nhorizontal\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display widgets horizontally\n\n\n\n\nwidgets\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage: each element of the \narray\n must be a widget \nobject\n\n\n\n\n\n\nPanel\n\n\nPanels can contains tabs or widgets. These can be absolutely positioned and can overflow their parent's size (which will then display scrollbars).\n\n\n{\n    type:'panel',\n    // etc\n}\n\n\n\n\nscroll\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: set to \nfalse\n to disable scrollbars\n\n\n\n\nwidgets\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage: each element of the \narray\n must be a widget \nobject\n. A panel cannot contain widgets and tabs simultaneously.\n\n\n\n\ntabs\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage: each element of the \narray\n must be a tab \nobject\n. A panel cannot contain widgets and tabs simultaneously.\n\n\n\n\nlayout\n\n\n\n\ntype: \nstring\n\n\ndefault: \n''\n\n\nusage: \nlayout\n must be a valid \nVisual Format Language\n expression. It accepts the \nExtended Visual Format Language\n as well. Widgets are targeted using their \nid\n or their index prefixed with a \n$\n (\n$0, $1, etc\n), the latter method being incompatible with the \nrange spread operator\n. Expressions can be tested and debugged with the online \nVisual Format Editor\n.\n\n\n\n\nspacing\n\n\n\n\ntype: \ninteger|array\n\n\ndefault: \n0\n\n\nusage: spacing size used in \nlayout\n expression, can be set as a \n[vertical,horizontal]\n array.\n\n\n\n\n\n\nModal\n\n\nModals are buttons that turn into a fullscreen panels when enabled. They can be enabled via osc (1 to enable, 0 to disable).\n\n\n{\n    type:'modal',\n    // etc\n}\n\n\n\n\noptions\n\n\n\n\nsee panel's \noptions", 
            "title": "Containers"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/#containers", 
            "text": "Containers can contain any widgets", 
            "title": "Containers"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/#strip", 
            "text": "Strips can contain any number of widgets, which can't be absolutely positioned and whose size can't overflow their parent's.  {\n    type:'strip',\n    // etc\n}", 
            "title": "Strip"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/#horizontal", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display widgets horizontally", 
            "title": "horizontal"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/#widgets", 
            "text": "type:  array  default:  []  usage: each element of the  array  must be a widget  object", 
            "title": "widgets"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/#panel", 
            "text": "Panels can contains tabs or widgets. These can be absolutely positioned and can overflow their parent's size (which will then display scrollbars).  {\n    type:'panel',\n    // etc\n}", 
            "title": "Panel"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/#scroll", 
            "text": "type:  boolean  default:  true  usage: set to  false  to disable scrollbars", 
            "title": "scroll"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/#widgets_1", 
            "text": "type:  array  default:  []  usage: each element of the  array  must be a widget  object . A panel cannot contain widgets and tabs simultaneously.", 
            "title": "widgets"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/#tabs", 
            "text": "type:  array  default:  []  usage: each element of the  array  must be a tab  object . A panel cannot contain widgets and tabs simultaneously.", 
            "title": "tabs"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/#layout", 
            "text": "type:  string  default:  ''  usage:  layout  must be a valid  Visual Format Language  expression. It accepts the  Extended Visual Format Language  as well. Widgets are targeted using their  id  or their index prefixed with a  $  ( $0, $1, etc ), the latter method being incompatible with the  range spread operator . Expressions can be tested and debugged with the online  Visual Format Editor .", 
            "title": "layout"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/#spacing", 
            "text": "type:  integer|array  default:  0  usage: spacing size used in  layout  expression, can be set as a  [vertical,horizontal]  array.", 
            "title": "spacing"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/#modal", 
            "text": "Modals are buttons that turn into a fullscreen panels when enabled. They can be enabled via osc (1 to enable, 0 to disable).  {\n    type:'modal',\n    // etc\n}", 
            "title": "Modal"
        }, 
        {
            "location": "/user-guide/widgets-specifics/containers/#options", 
            "text": "see panel's  options", 
            "title": "options"
        }, 
        {
            "location": "/user-guide/widgets-specifics/maths/", 
            "text": "Maths\n\n\nMaths do the maths !\n\n\n\n\nFormula\n\n\nFormula evaluates mathematical expressions over other widgets' values each one of these widgets changes.\n\n\n{\n    type:'formula',\n    // etc\n}\n\n\n\n\nformula\n\n\n\n\ntype: \nstring\n\n\ndefault: \n''\n\n\nusage: a \nmathjs\n expression in which\n\n\n${id}\n will be replaced the \nid\n's value  \n\n\nexample: \n${fader_1} * 2 + ${fader_2}\n\n\n\n\n\n\nimportant note\n: contrary to what is stated in \nmathjs\n' documentation, \nmatrix indexes are zero-based\n here\n\n\n\n\ncondition\n\n\n\n\ntype: \nstring\n\n\ndefault: \n''\n\n\nusage:\n\n\na \nmathjs\n comparison expression that bypasses widget's osc sending when returning\nfalse\n\n\nexample: \n${fader_1} \n 0.5\n\n\n\n\n\n\n\n\nsplit\n\n\n\n\ntype: \nobject\n\n\ndefault: \n[]\n\n\nusage: specify a different \naddress\n for each item of the widget's value : \n['/a', '/b']\n\n\nnote: only use this is the formula return an \narray", 
            "title": "Maths"
        }, 
        {
            "location": "/user-guide/widgets-specifics/maths/#maths", 
            "text": "Maths do the maths !", 
            "title": "Maths"
        }, 
        {
            "location": "/user-guide/widgets-specifics/maths/#formula", 
            "text": "Formula evaluates mathematical expressions over other widgets' values each one of these widgets changes.  {\n    type:'formula',\n    // etc\n}", 
            "title": "Formula"
        }, 
        {
            "location": "/user-guide/widgets-specifics/maths/#formula_1", 
            "text": "type:  string  default:  ''  usage: a  mathjs  expression in which  ${id}  will be replaced the  id 's value    example:  ${fader_1} * 2 + ${fader_2}    important note : contrary to what is stated in  mathjs ' documentation,  matrix indexes are zero-based  here", 
            "title": "formula"
        }, 
        {
            "location": "/user-guide/widgets-specifics/maths/#condition", 
            "text": "type:  string  default:  ''  usage:  a  mathjs  comparison expression that bypasses widget's osc sending when returning false  example:  ${fader_1}   0.5", 
            "title": "condition"
        }, 
        {
            "location": "/user-guide/widgets-specifics/maths/#split", 
            "text": "type:  object  default:  []  usage: specify a different  address  for each item of the widget's value :  ['/a', '/b']  note: only use this is the formula return an  array", 
            "title": "split"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/", 
            "text": "Matrices\n\n\nMatrices are special containers that only contain one type of widget. All contained widgets will be traversed by single dragging gestures.\n\n\nMultifader\n\n\nMultifader creates a row of vertical faders that respond to the same gestures.\n\n\n{\n    type:'multifader',\n    // etc\n}\n\n\n\n\nstrips\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n2\n\n\nusage: number of faders in the row, each fader will inherit its parent's properties and the following ones (where \ni\n is the fader's index in the row)\n\n\nid\n: same as the widget's with \n/i\n appended to it\n\n\nlabel\n: \ni\n\n\naddress\n: same as the widget's with \n/i\n appended to it\n\n\n\n\n\n\n\n\nstart\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n0\n\n\nusage: first faders's index\n\n\n\n\ntraversing\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: enable traversing gestures\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: if \ntrue\n, the fader's index will be appended to the widget's osc \naddress\n; if \nfalse\n it will be prepended to the widget's \npreArgs\n\n\n\n\ncolor\n\n\n\n\ntype: \nstring|array\n\n\ndefault: \nauto\n, inherited accent color\n\n\nusage: can be an \narray\n of css color \nstrings\n, which will be sequentially passed to the faders \n\n\n\n\noptions\n\n\n\n\nsee fader's \noptions\n\n\n\n\n\n\nMultitoggle\n\n\n{\n    type:'multitoggle',\n    // etc\n}\n\n\n\n\nmatrix\n\n\n\n\ntype: \narray\n\n\ndefault: \n[2,2]\n\n\nusage: defines the number of columns and and rows. Each cell will contain a toggle button that will inherit its parent's properties and the following ones (where \ni\n is the fader's index in the row)\n\n\nid\n: same as the widget's with \n/i\n appended to it\n\n\nlabel\n: \ni\n\n\naddress\n: same as the widget's with \n/i\n appended to it\n\n\n\n\n\n\n\n\nstart\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n0\n\n\nusage: first toggle's index\n\n\n\n\ntraversing\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: enable traversing gestures\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: if \ntrue\n, the toggle's index will be appended to the widget's osc \naddress\n; if \nfalse\n it will be prepended to the widget's \npreArgs\n\n\n\n\ncolor\n\n\n\n\ntype: \nstring|array\n\n\ndefault: \nauto\n, inherited accent color\n\n\nusage: can be an \narray\n of css color \nstrings\n, which will be sequentially passed to the toggles\n\n\n\n\noptions\n\n\n\n\nsee toggle's \noptions\n\n\n\n\n\n\nMultipush\n\n\n{\n    type:'multipush',\n    // etc\n}\n\n\n\n\nmatrix\n\n\n\n\ntype: \narray\n\n\ndefault: \n[2,2]\n\n\nusage: defines the number of columns and and rows. Each cell will contain a push button that will inherit its parent's properties and the following ones (where \ni\n is the fader's index in the row)\n\n\nid\n: same as the widget's with \n/i\n appended to it\n\n\nlabel\n: \ni\n\n\naddress\n: same as the widget's with \n/i\n appended to it\n\n\n\n\n\n\n\n\nstart\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n0\n\n\nusage: first push's index\n\n\n\n\ntraversing\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: enable traversing gestures\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: if \ntrue\n, the push's index will be appended to the widget's osc \naddress\n; if \nfalse\n it will be prepended to the widget's \npreArgs\n\n\n\n\ncolor\n\n\n\n\ntype: \nstring|array\n\n\ndefault: \nauto\n, inherited accent color\n\n\nusage: can be an \narray\n of css color \nstrings\n, which will be sequentially passed to the pushes\n\n\n\n\noptions\n\n\n\n\nsee push's \noptions\n\n\n\n\n\n\nKeyboard\n\n\nThis one works pretty much like the multipush, excepts it looks like a piano keyboard ad\n\n\n{\n    type:'keyboard',\n    // etc\n}\n\n\n\n\nkeys\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n24\n\n\nusage: defines the number keys\n\n\n\n\nstart\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n60\n\n\nusage: MIDI note number to start with (default is C4)\n\n\n\n\ntraversing\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: enable traversing gestures\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: if \ntrue\n, the note's midi code will be appended to the widget's osc \naddress\n; if \nfalse\n it will be prepended to the widget's \npreArgs\n\n\n\n\noptions\n\n\n\n\nsee push's \noptions\n\n\n\n\ncss\n\n\n--color-white:color; /* white keys color */\n--color-black:color; /* black keys color */", 
            "title": "Matrices"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#matrices", 
            "text": "Matrices are special containers that only contain one type of widget. All contained widgets will be traversed by single dragging gestures.", 
            "title": "Matrices"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#multifader", 
            "text": "Multifader creates a row of vertical faders that respond to the same gestures.  {\n    type:'multifader',\n    // etc\n}", 
            "title": "Multifader"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#strips", 
            "text": "type:  integer  default:  2  usage: number of faders in the row, each fader will inherit its parent's properties and the following ones (where  i  is the fader's index in the row)  id : same as the widget's with  /i  appended to it  label :  i  address : same as the widget's with  /i  appended to it", 
            "title": "strips"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#start", 
            "text": "type:  integer  default:  0  usage: first faders's index", 
            "title": "start"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#traversing", 
            "text": "type:  boolean  default:  true  usage: enable traversing gestures", 
            "title": "traversing"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#split", 
            "text": "type:  boolean  default:  false  usage: if  true , the fader's index will be appended to the widget's osc  address ; if  false  it will be prepended to the widget's  preArgs", 
            "title": "split"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#color", 
            "text": "type:  string|array  default:  auto , inherited accent color  usage: can be an  array  of css color  strings , which will be sequentially passed to the faders", 
            "title": "color"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#options", 
            "text": "see fader's  options", 
            "title": "options"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#multitoggle", 
            "text": "{\n    type:'multitoggle',\n    // etc\n}", 
            "title": "Multitoggle"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#matrix", 
            "text": "type:  array  default:  [2,2]  usage: defines the number of columns and and rows. Each cell will contain a toggle button that will inherit its parent's properties and the following ones (where  i  is the fader's index in the row)  id : same as the widget's with  /i  appended to it  label :  i  address : same as the widget's with  /i  appended to it", 
            "title": "matrix"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#start_1", 
            "text": "type:  integer  default:  0  usage: first toggle's index", 
            "title": "start"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#traversing_1", 
            "text": "type:  boolean  default:  true  usage: enable traversing gestures", 
            "title": "traversing"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#split_1", 
            "text": "type:  boolean  default:  false  usage: if  true , the toggle's index will be appended to the widget's osc  address ; if  false  it will be prepended to the widget's  preArgs", 
            "title": "split"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#color_1", 
            "text": "type:  string|array  default:  auto , inherited accent color  usage: can be an  array  of css color  strings , which will be sequentially passed to the toggles", 
            "title": "color"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#options_1", 
            "text": "see toggle's  options", 
            "title": "options"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#multipush", 
            "text": "{\n    type:'multipush',\n    // etc\n}", 
            "title": "Multipush"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#matrix_1", 
            "text": "type:  array  default:  [2,2]  usage: defines the number of columns and and rows. Each cell will contain a push button that will inherit its parent's properties and the following ones (where  i  is the fader's index in the row)  id : same as the widget's with  /i  appended to it  label :  i  address : same as the widget's with  /i  appended to it", 
            "title": "matrix"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#start_2", 
            "text": "type:  integer  default:  0  usage: first push's index", 
            "title": "start"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#traversing_2", 
            "text": "type:  boolean  default:  true  usage: enable traversing gestures", 
            "title": "traversing"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#split_2", 
            "text": "type:  boolean  default:  false  usage: if  true , the push's index will be appended to the widget's osc  address ; if  false  it will be prepended to the widget's  preArgs", 
            "title": "split"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#color_2", 
            "text": "type:  string|array  default:  auto , inherited accent color  usage: can be an  array  of css color  strings , which will be sequentially passed to the pushes", 
            "title": "color"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#options_2", 
            "text": "see push's  options", 
            "title": "options"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#keyboard", 
            "text": "This one works pretty much like the multipush, excepts it looks like a piano keyboard ad  {\n    type:'keyboard',\n    // etc\n}", 
            "title": "Keyboard"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#keys", 
            "text": "type:  integer  default:  24  usage: defines the number keys", 
            "title": "keys"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#start_3", 
            "text": "type:  integer  default:  60  usage: MIDI note number to start with (default is C4)", 
            "title": "start"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#traversing_3", 
            "text": "type:  boolean  default:  true  usage: enable traversing gestures", 
            "title": "traversing"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#split_3", 
            "text": "type:  boolean  default:  false  usage: if  true , the note's midi code will be appended to the widget's osc  address ; if  false  it will be prepended to the widget's  preArgs", 
            "title": "split"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#options_3", 
            "text": "see push's  options", 
            "title": "options"
        }, 
        {
            "location": "/user-guide/widgets-specifics/matrices/#css", 
            "text": "--color-white:color; /* white keys color */\n--color-black:color; /* black keys color */", 
            "title": "css"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/", 
            "text": "Pads\n\n\nPads are multidimensional widgets that output multiple values.\n\n\n\n\nXY\n\n\n{\n    type:'xy',\n    // etc\n}\n\n\n\n\nrangeX\n\n\n\n\ntype: \nobject\n\n\ndefault:\n    \n{\"min\":0,\"max\":1}\n\n\nusage: defines the \nmin\n and \nmax\n values for the \nx\n axis. Same as fader's \nrange\n\n\n\n\nrangeY\n\n\n\n\ntype: \nobject\n\n\ndefault:\n    \n{\"min\":0,\"max\":1}\n\n\nusage: defines the \nmin\n and \nmax\n values for the \ny\n axis. Same as fader's \nrange\n\n\n\n\nlogScaleX\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \nx\n axis (log10)\n\n\n\n\nlogScaleY\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \ny\n axis (log10)\n\n\n\n\nsnap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: by default, dragging the widget will modify it's value starting from its last value. Setting this to \ntrue\n will make it snap directly to the mouse/touch position.\n\n\n\n\nspring\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: when set to \ntrue\n, the widget will go back to its initial value when released.\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean|object\n\n\ndefault: \nfalse\n\n\nusage:\n\n\nset to \ntrue\n to send separate osc messages for \nx\n and \ny\n axis. The \naddress\n will be the same as the widget's with \n/x\n or \n/y\n appended to it\n\n\ncan be set as an object to specify a different \naddress\n : \n['/osc_address_x', '/osc_address_y']\n\n\n\n\n\n\nnote: the widget will only respond to its original osc address, not to the splitted version\n\n\n\n\n\n\nMultiXy\n\n\n{\n    type:'multixy',\n    // etc\n}\n\n\n\n\npoints\n\n\n\n\ntype: \ninteger|array\n\n\ndefault: \n2\n\n\nusage: defines the number of points on the pad. Can be an \narray\n of \nstrings\n that will be used as labels for the points (ex: \n['A', 'B']\n)\n\n\n\n\npointSize\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n15\n\n\nusage: defines the points's size\n\n\n\n\nrangeX\n\n\n\n\ntype: \nobject\n\n\ndefault:\n    \n{\"min\":0,\"max\":1}\n\n\nusage: defines the \nmin\n and \nmax\n values for the \nx\n axis. Same as fader's \nrange\n\n\n\n\nrangeY\n\n\n\n\ntype: \nobject\n\n\ndefault:\n    \n{\"min\":0,\"max\":1}\n\n\nusage: defines the \nmin\n and \nmax\n values for the \ny\n axis. Same as fader's \nrange\n\n\n\n\nlogScaleX\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \nx\n axis (log10)\n\n\n\n\nlogScaleY\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \ny\n axis (log10)\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean|object\n\n\ndefault: \nfalse\n\n\nusage:\n\n\nset to \ntrue\n to send separate osc messages for each point's \nx\n and \ny\n axis. The \naddress\n will be the same as the widget's with \n/N/x\n or \n/N/y\n appended to it, where \nN\n is the point's id (or the point's label if \npoints\n is an \narray\n).\n\n\ncan be set as an object to specify a different \naddress\n : \n['/0/x', '/0/y', '/1/x', '/2/y']\n\n\n\n\n\n\nnote: the widget will only respond to its original osc address, not to the splitted version\n\n\n\n\nsnap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: by default, the points are dragged from their initial position; if set to \ntrue\n, touching anywhere on the widget's surface will make them snap to the touching coordinates (one per touch).\n\n\n\n\n\n\nRGB\n\n\nRGB is a variant of XY, it outputs rgb values between 0 and 255.\n\n\n{\n    type:'rgb',\n    // etc\n}\n\n\n\n\nprecision\n\n\n\n\ndefault:\n0\n\n\n\n\nsnap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: by default, dragging the widget will modify it's value starting from its last value. Setting this to true will make it snap directly to the mouse/touch position.\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean|object\n\n\ndefault: \nfalse\n\n\nusage:\n\n\nset to \ntrue\n to send separate osc messages for \nr\n and \ng\n \n \nb\n. The \naddress\n will be the same as the widget's with \n/r\n, \n/g\n or \n/b\n appended to it\n\n\ncan be set as an object to specify a different \naddress\n : \n['/r', '/b', '/b']", 
            "title": "Pads"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#pads", 
            "text": "Pads are multidimensional widgets that output multiple values.", 
            "title": "Pads"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#xy", 
            "text": "{\n    type:'xy',\n    // etc\n}", 
            "title": "XY"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#rangex", 
            "text": "type:  object  default:\n     {\"min\":0,\"max\":1}  usage: defines the  min  and  max  values for the  x  axis. Same as fader's  range", 
            "title": "rangeX"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#rangey", 
            "text": "type:  object  default:\n     {\"min\":0,\"max\":1}  usage: defines the  min  and  max  values for the  y  axis. Same as fader's  range", 
            "title": "rangeY"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#logscalex", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  x  axis (log10)", 
            "title": "logScaleX"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#logscaley", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  y  axis (log10)", 
            "title": "logScaleY"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#snap", 
            "text": "type:  boolean  default:  false  usage: by default, dragging the widget will modify it's value starting from its last value. Setting this to  true  will make it snap directly to the mouse/touch position.", 
            "title": "snap"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#spring", 
            "text": "type:  boolean  default:  false  usage: when set to  true , the widget will go back to its initial value when released.", 
            "title": "spring"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#split", 
            "text": "type:  boolean|object  default:  false  usage:  set to  true  to send separate osc messages for  x  and  y  axis. The  address  will be the same as the widget's with  /x  or  /y  appended to it  can be set as an object to specify a different  address  :  ['/osc_address_x', '/osc_address_y']    note: the widget will only respond to its original osc address, not to the splitted version", 
            "title": "split"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#multixy", 
            "text": "{\n    type:'multixy',\n    // etc\n}", 
            "title": "MultiXy"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#points", 
            "text": "type:  integer|array  default:  2  usage: defines the number of points on the pad. Can be an  array  of  strings  that will be used as labels for the points (ex:  ['A', 'B'] )", 
            "title": "points"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#pointsize", 
            "text": "type:  integer  default:  15  usage: defines the points's size", 
            "title": "pointSize"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#rangex_1", 
            "text": "type:  object  default:\n     {\"min\":0,\"max\":1}  usage: defines the  min  and  max  values for the  x  axis. Same as fader's  range", 
            "title": "rangeX"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#rangey_1", 
            "text": "type:  object  default:\n     {\"min\":0,\"max\":1}  usage: defines the  min  and  max  values for the  y  axis. Same as fader's  range", 
            "title": "rangeY"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#logscalex_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  x  axis (log10)", 
            "title": "logScaleX"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#logscaley_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  y  axis (log10)", 
            "title": "logScaleY"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#split_1", 
            "text": "type:  boolean|object  default:  false  usage:  set to  true  to send separate osc messages for each point's  x  and  y  axis. The  address  will be the same as the widget's with  /N/x  or  /N/y  appended to it, where  N  is the point's id (or the point's label if  points  is an  array ).  can be set as an object to specify a different  address  :  ['/0/x', '/0/y', '/1/x', '/2/y']    note: the widget will only respond to its original osc address, not to the splitted version", 
            "title": "split"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#snap_1", 
            "text": "type:  boolean  default:  false  usage: by default, the points are dragged from their initial position; if set to  true , touching anywhere on the widget's surface will make them snap to the touching coordinates (one per touch).", 
            "title": "snap"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#rgb", 
            "text": "RGB is a variant of XY, it outputs rgb values between 0 and 255.  {\n    type:'rgb',\n    // etc\n}", 
            "title": "RGB"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#precision", 
            "text": "default: 0", 
            "title": "precision"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#snap_2", 
            "text": "type:  boolean  default:  false  usage: by default, dragging the widget will modify it's value starting from its last value. Setting this to true will make it snap directly to the mouse/touch position.", 
            "title": "snap"
        }, 
        {
            "location": "/user-guide/widgets-specifics/pads/#split_2", 
            "text": "type:  boolean|object  default:  false  usage:  set to  true  to send separate osc messages for  r  and  g     b . The  address  will be the same as the widget's with  /r ,  /g  or  /b  appended to it  can be set as an object to specify a different  address  :  ['/r', '/b', '/b']", 
            "title": "split"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/", 
            "text": "Plots\n\n\nPlots are tools that display other widgets' state or incomming osc messages. They are not sensitive to mouse and touch interactions.\n\n\nLed\n\n\n{\n    type:'led',\n    // etc\n}\n\n\n\n\nrange\n\n\n\n\ntype: \nobject\n\n\ndefault: \n{\"min\":0,\"max\":1}\n\n\nusage: defines the \nmin\n and \nmax\n value the led's intensity will be mapped to\n\n\n\n\nlogScale\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to true use logarithmic scaling\n\n\n\n\nRgbLed\n\n\n{\n    type:'rgbled',\n    // etc\n}\n\n\n\n\nThis one is like the \nled\n except it takes three arguments (red, green and blue values between 0 and 255) with an optionnal forth argument (alpha, between 0 and 1)\n\n\nPlot\n\n\nThe plot receives an array of [x,y]\u00a0coordinates and draws them on a chart with linear or logarithmic interpolation.\n\n\n{\n    type:'plot',\n    // etc\n}\n\n\n\n\npoints\n\n\n\n\ntype: \narray|string\n\n\ndefault: \n[]\n\n\nusage:\n\n\nas a \nstring\n: a widget's \nid\n whose multiple values will be displayed on the \ny\n axis, evenly spaced on the \nx\n axis (only \nmatrices\n and \npads\n will work)\n\n\nas an \narray\n: each element must be an \narray\n of \n[x,y]\n coordinates, where \nx\n and \ny\n can either be a:\n\n\nnumber\n: constant values\n\n\nstring\n: a widget's \nid\n whose value will be used\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n\n\n\n\ntype: \nobject\n\n\ndefault:\n    \n{\n        x:{\"min\":0,\"max\":1},\n        y:{\"min\":0,\"max\":1}\n    }\n\n\nusage: defines the \nmin\n and \nmax\n values for the \nx\n and \ny\n axis\n\n\n\n\nlogScaleX\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \nx\n axis (log10)\n\n\n\n\nlogScaleY\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \ny\n axis (log10)\n\n\n\n\norigin\n\n\n\n\ntype: \nnumber\n\n\ndefault: \nauto\n\n\nusage: defines the y-axis origin. Set to \nfalse\n to disable it.\n\n\n\n\nEq\n\n\nThe Eq receives an array of filter objects and draws their frequency response between 20Hz and 22050Hz.\n\n\n{\n    type:'eq',\n    // etc\n}\n\n\n\n\nfilters\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage:\n\n\neach item must be an object of the form below\n\n\nall filters parameters can be filled with widget ids, whose value will be used\n\n\n\n\n\n\n\n\n{\n    type:[string],   // \nhighpass\n, \nhighshelf\n, \nlowpass\n, \nlowshelf\n, \npeak\n, \nnotch\n\n    freq:[number],   //\n    q:[number],      //\n    gain:[number],   //\n    on:[bool]        // 1 or true = active, 0 or false = bypassed\n}\n\n\n\n\nresolution\n\n\n\n\ntype: \nnumber\n\n\ndefault: \n128\n\n\nusage: defines the number of points used to compute the frequency response\n\n\n\n\nrangeY\n\n\n\n\ntype: \nobject\n\n\ndefault:\n    \n{\"min\":-20,\"max\":20}\n\n\nusage: defines the \nmin\n and \nmax\n values for the \ny\n axis (dB level)\n\n\n\n\nlogScaleX\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \nx\n axis (log10)\n\n\n\n\norigin\n\n\n\n\ntype: \nnumber\n\n\ndefault: \nauto\n\n\nusage: defines the y-axis origin. Set to \nfalse\n to disable it.\n\n\n\n\nVisualizer\n\n\nThe visualizer displays the evolution in time of a received value (through osc) \nor\n another widget's value.\n\n\n{\n    type:'visualizer',\n    // etc\n}\n\n\n\n\nwidgetId\n\n\n\n\ntype: \nobject\n\n\ndefault: \nempty\n\n\nusage: a widget's \nid\n whose value will be displayed (thus bypassing the incoming osc)\n\n\n\n\nduration\n\n\n\n\ntype: \nnumber\n\n\ndefault: \n1\n\n\nusage: window size in seconds\n\n\n\n\nrange\n\n\n\n\ntype: \nobject\n\n\ndefault: \n{\"min\":0,\"max\":1}\n\n\nusage: defines the \nmin\n and \nmax\n values for the \ny\n axis\n\n\n\n\nlogScale\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n use logarithmic scaling (log10)\n\n\n\n\norigin\n\n\n\n\ntype: \nnumber\n\n\ndefault: \nauto\n\n\nusage: defines the y-axis origin. Set to \nfalse\n to disable it.\n\n\n\n\nText\n\n\nText displays incoming values (via osc) as text. Sending a message with no argument to the widget will reset it to its default text.\n\n\n{\n    type:'text',\n    // etc\n}\n\n\n\n\nwidgetId\n\n\n\n\ntype: \nobject\n\n\ndefault: \nempty\n\n\nusage: a widget's \nid\n whose value will be displayed\n\n\n\n\nvertical\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n display vertically\n\n\n\n\nMeter\n\n\nMeter displays incoming numerical values (via osc) as a gauge level\n\n\n{\n    type:'meter',\n    // etc\n}\n\n\n\n\nwidgetId\n\n\n\n\ntype: \nobject\n\n\ndefault: \nempty\n\n\nusage: a widget's \nid\n whose value will be displayed\n\n\n\n\nhorizontal\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display the meter horizontally\n\n\n\n\nrange\n\n\n\n\nsee fader's \nrange\n\n\n\n\nlogScale\n\n\n\n\nsee fader's \nlogScale", 
            "title": "Plots"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#plots", 
            "text": "Plots are tools that display other widgets' state or incomming osc messages. They are not sensitive to mouse and touch interactions.", 
            "title": "Plots"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#led", 
            "text": "{\n    type:'led',\n    // etc\n}", 
            "title": "Led"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#range", 
            "text": "type:  object  default:  {\"min\":0,\"max\":1}  usage: defines the  min  and  max  value the led's intensity will be mapped to", 
            "title": "range"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#logscale", 
            "text": "type:  boolean  default:  false  usage: set to true use logarithmic scaling", 
            "title": "logScale"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#rgbled", 
            "text": "{\n    type:'rgbled',\n    // etc\n}  This one is like the  led  except it takes three arguments (red, green and blue values between 0 and 255) with an optionnal forth argument (alpha, between 0 and 1)", 
            "title": "RgbLed"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#plot", 
            "text": "The plot receives an array of [x,y]\u00a0coordinates and draws them on a chart with linear or logarithmic interpolation.  {\n    type:'plot',\n    // etc\n}", 
            "title": "Plot"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#points", 
            "text": "type:  array|string  default:  []  usage:  as a  string : a widget's  id  whose multiple values will be displayed on the  y  axis, evenly spaced on the  x  axis (only  matrices  and  pads  will work)  as an  array : each element must be an  array  of  [x,y]  coordinates, where  x  and  y  can either be a:  number : constant values  string : a widget's  id  whose value will be used", 
            "title": "points"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#range_1", 
            "text": "type:  object  default:\n     {\n        x:{\"min\":0,\"max\":1},\n        y:{\"min\":0,\"max\":1}\n    }  usage: defines the  min  and  max  values for the  x  and  y  axis", 
            "title": "range"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#logscalex", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  x  axis (log10)", 
            "title": "logScaleX"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#logscaley", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  y  axis (log10)", 
            "title": "logScaleY"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#origin", 
            "text": "type:  number  default:  auto  usage: defines the y-axis origin. Set to  false  to disable it.", 
            "title": "origin"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#eq", 
            "text": "The Eq receives an array of filter objects and draws their frequency response between 20Hz and 22050Hz.  {\n    type:'eq',\n    // etc\n}", 
            "title": "Eq"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#filters", 
            "text": "type:  array  default:  []  usage:  each item must be an object of the form below  all filters parameters can be filled with widget ids, whose value will be used     {\n    type:[string],   //  highpass ,  highshelf ,  lowpass ,  lowshelf ,  peak ,  notch \n    freq:[number],   //\n    q:[number],      //\n    gain:[number],   //\n    on:[bool]        // 1 or true = active, 0 or false = bypassed\n}", 
            "title": "filters"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#resolution", 
            "text": "type:  number  default:  128  usage: defines the number of points used to compute the frequency response", 
            "title": "resolution"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#rangey", 
            "text": "type:  object  default:\n     {\"min\":-20,\"max\":20}  usage: defines the  min  and  max  values for the  y  axis (dB level)", 
            "title": "rangeY"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#logscalex_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  x  axis (log10)", 
            "title": "logScaleX"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#origin_1", 
            "text": "type:  number  default:  auto  usage: defines the y-axis origin. Set to  false  to disable it.", 
            "title": "origin"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#visualizer", 
            "text": "The visualizer displays the evolution in time of a received value (through osc)  or  another widget's value.  {\n    type:'visualizer',\n    // etc\n}", 
            "title": "Visualizer"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#widgetid", 
            "text": "type:  object  default:  empty  usage: a widget's  id  whose value will be displayed (thus bypassing the incoming osc)", 
            "title": "widgetId"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#duration", 
            "text": "type:  number  default:  1  usage: window size in seconds", 
            "title": "duration"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#range_2", 
            "text": "type:  object  default:  {\"min\":0,\"max\":1}  usage: defines the  min  and  max  values for the  y  axis", 
            "title": "range"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#logscale_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  use logarithmic scaling (log10)", 
            "title": "logScale"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#origin_2", 
            "text": "type:  number  default:  auto  usage: defines the y-axis origin. Set to  false  to disable it.", 
            "title": "origin"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#text", 
            "text": "Text displays incoming values (via osc) as text. Sending a message with no argument to the widget will reset it to its default text.  {\n    type:'text',\n    // etc\n}", 
            "title": "Text"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#widgetid_1", 
            "text": "type:  object  default:  empty  usage: a widget's  id  whose value will be displayed", 
            "title": "widgetId"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#vertical", 
            "text": "type:  boolean  default:  false  usage: set to  true  display vertically", 
            "title": "vertical"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#meter", 
            "text": "Meter displays incoming numerical values (via osc) as a gauge level  {\n    type:'meter',\n    // etc\n}", 
            "title": "Meter"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#widgetid_2", 
            "text": "type:  object  default:  empty  usage: a widget's  id  whose value will be displayed", 
            "title": "widgetId"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#horizontal", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display the meter horizontally", 
            "title": "horizontal"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#range_3", 
            "text": "see fader's  range", 
            "title": "range"
        }, 
        {
            "location": "/user-guide/widgets-specifics/plots/#logscale_2", 
            "text": "see fader's  logScale", 
            "title": "logScale"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/", 
            "text": "Sliders\n\n\nSliders are unidimensional widgets that output one value at a time.\n\n\n\n\nFader\n\n\n{\n    type:'fader',\n    // etc\n}\n\n\n\n\nhorizontal\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display the fader horizontally\n\n\n\n\nalignRight\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to invert the pip's and fader's position\n\n\n\n\nnoPip\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to hide the scale\n\n\n\n\ncompact\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display a compact alternative for the widget. Disables default mouse/touch focusing on the value display (right-click/long-touch still triggers it).\n\n\n\n\nrange\n\n\n\n\ntype: \nobject\n\n\ndefault: \n{\"min\":0,\"max\":1}\n\n\nusage: \nrange\n defines the breakpoints of the fader's scale\n\n\nkeys can be percentages and/or \nmin\n / \nmax\n\n\nvalues can be \nnumber\n or \nobject\n if a custom label is needed\n\n\n\n\n\n\nexample:\n\n\n\n\nrange: {\n    \nmin\n:0,\n    \n50%\n:1,        \n    \nmax\n: {\ninf\n:10} // \ninf\n will be used as a custom label on the scale\n}\n\n\n\n\norigin\n\n\n\n\ntype: \nnumber\n\n\ndefault: \nauto\n\n\nusage: \norigin\n defines the starting point's value of the fader's gauge\n\n\n\n\nlogScale\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n use logarithmic scaling between breakpoints (log10)\n\n\n\n\nunit\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: \nunit\n will be appended to the displayed widget's value (it doesn't affect osc messages)\n\n\n\n\nsnap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: by default, dragging the widget will modify it's value starting from its last value. Setting this to \ntrue\n will make it snap directly to the mouse/touch position.\n\n\n\n\nspring\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: when set to \ntrue\n, the widget will go back to its initial value when released.\n\n\n\n\nmeter\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to true to display a vu-meter next in the fader\n\n\nthe meter's \nid\n will be the same as the widget's with \n/meter\n appended to it\n\n\nthe meter's \naddress\nwill be the same as the widget's with \n/meter\n appended to it\n\n\n\n\n\n\n\n\nmeterAddress\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nempty\n\n\nusage: overrides the \nmeter\n's osc address\n\n\n\n\ncss\n\n\n--color-gauge:color;\n--color-knob:color;\n--color-pips:color;\n\n\n\n\n\n\nKnob\n\n\n{\n    type:'knob',\n    // etc\n}\n\n\n\n\nnoPip\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: set to \nfalse\n to show the scale\n\n\n\n\ncompact\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display a compact alternative for the widget. Disables mouse/touch focusing on the value display.\n\n\n\n\nangle\n\n\n\n\ntype: \nnumber\n\n\ndefault: \n270\n\n\nusage: \nangle\n defines the angle's width of the knob, in degrees\n\n\n\n\nrange\n\n\n\n\ntype: \nobject\n\n\ndefault: \n{\"min\":0,\"max\":1}\n\n\nusage: \nrange\n defines the breakpoints of the fader's scale\n\n\nkeys can be percentages and/or \nmin\n / \nmax\n\n\nvalues can be \nnumber\n or \nobject\n if a custom label is needed\n\n\n\n\n\n\nexample:\n\n\n\n\nrange: {\n    \nmin\n:0,\n    \n50%\n:1,        \n    \nmax\n: {\ninf\n:10} // \ninf\n will be used as a custom label on the scale\n}\n\n\n\n\norigin\n\n\n\n\ntype: \nnumber\n\n\ndefault: \nauto\n\n\nusage: \norigin\n defines the starting point's value of the knob's gauge\n\n\n\n\nlogScale\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n use logarithmic scaling between breakpoints\n\n\n\n\nunit\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: \nunit\n will be appended to the displayed widget's value (it doesn't affect osc messages)\n\n\n\n\nsnap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: by default, dragging the widget \nvertically\n will modify it's value starting from its last value. Setting this to \ntrue\n will make it snap directly to the mouse/touch position.\n\n\n\n\nspring\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: when set to \ntrue\n, the widget will go back to its initial value when released.\n\n\n\n\ncss\n\n\n--color-gauge:color;\n--color-knob:color;\n--color-pips:color;\n\n\n\n\nEncoder\n\n\nAn endless knob that only responds to rotative gestures.\n\n\n{\n    type:'encoder',\n    // etc\n}\n\n\n\n\nticks\n\n\n\n\ntype: \nnumber\n\n\ndefault: \n360\n\n\nusage: defines the granularity / verbosity of the encoder (number of step for a 360\u00b0 arc)\n\n\n\n\nback\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \n-1\n\n\nusage: defines which value is sent when rotating the encoder anticlockwise\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\nforth\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \n1\n\n\nusage: defines which value is sent when rotating the encoder clockwise\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\nrelease\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \nempty\n\n\nusage: defines which value is sent when releasing the encoder\n\n\nset to \nnull\n to send send no argument in the osc message\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\nsnap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: by default, dragging the widget will modify it's value starting from its last value. Setting this to \ntrue\n will make it snap directly to the mouse/touch position.\n\n\n\n\ncss\n\n\n--color-knob:color;", 
            "title": "Sliders"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#sliders", 
            "text": "Sliders are unidimensional widgets that output one value at a time.", 
            "title": "Sliders"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#fader", 
            "text": "{\n    type:'fader',\n    // etc\n}", 
            "title": "Fader"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#horizontal", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display the fader horizontally", 
            "title": "horizontal"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#alignright", 
            "text": "type:  boolean  default:  false  usage: set to  true  to invert the pip's and fader's position", 
            "title": "alignRight"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#nopip", 
            "text": "type:  boolean  default:  false  usage: set to  true  to hide the scale", 
            "title": "noPip"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#compact", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display a compact alternative for the widget. Disables default mouse/touch focusing on the value display (right-click/long-touch still triggers it).", 
            "title": "compact"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#range", 
            "text": "type:  object  default:  {\"min\":0,\"max\":1}  usage:  range  defines the breakpoints of the fader's scale  keys can be percentages and/or  min  /  max  values can be  number  or  object  if a custom label is needed    example:   range: {\n     min :0,\n     50% :1,        \n     max : { inf :10} //  inf  will be used as a custom label on the scale\n}", 
            "title": "range"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#origin", 
            "text": "type:  number  default:  auto  usage:  origin  defines the starting point's value of the fader's gauge", 
            "title": "origin"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#logscale", 
            "text": "type:  boolean  default:  false  usage: set to  true  use logarithmic scaling between breakpoints (log10)", 
            "title": "logScale"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#unit", 
            "text": "type:  string  default:  empty  usage:  unit  will be appended to the displayed widget's value (it doesn't affect osc messages)", 
            "title": "unit"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#snap", 
            "text": "type:  boolean  default:  false  usage: by default, dragging the widget will modify it's value starting from its last value. Setting this to  true  will make it snap directly to the mouse/touch position.", 
            "title": "snap"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#spring", 
            "text": "type:  boolean  default:  false  usage: when set to  true , the widget will go back to its initial value when released.", 
            "title": "spring"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#meter", 
            "text": "type:  boolean  default:  false  usage: set to true to display a vu-meter next in the fader  the meter's  id  will be the same as the widget's with  /meter  appended to it  the meter's  address will be the same as the widget's with  /meter  appended to it", 
            "title": "meter"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#meteraddress", 
            "text": "type:  boolean  default:  empty  usage: overrides the  meter 's osc address", 
            "title": "meterAddress"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#css", 
            "text": "--color-gauge:color;\n--color-knob:color;\n--color-pips:color;", 
            "title": "css"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#knob", 
            "text": "{\n    type:'knob',\n    // etc\n}", 
            "title": "Knob"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#nopip_1", 
            "text": "type:  boolean  default:  true  usage: set to  false  to show the scale", 
            "title": "noPip"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#compact_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display a compact alternative for the widget. Disables mouse/touch focusing on the value display.", 
            "title": "compact"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#angle", 
            "text": "type:  number  default:  270  usage:  angle  defines the angle's width of the knob, in degrees", 
            "title": "angle"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#range_1", 
            "text": "type:  object  default:  {\"min\":0,\"max\":1}  usage:  range  defines the breakpoints of the fader's scale  keys can be percentages and/or  min  /  max  values can be  number  or  object  if a custom label is needed    example:   range: {\n     min :0,\n     50% :1,        \n     max : { inf :10} //  inf  will be used as a custom label on the scale\n}", 
            "title": "range"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#origin_1", 
            "text": "type:  number  default:  auto  usage:  origin  defines the starting point's value of the knob's gauge", 
            "title": "origin"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#logscale_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  use logarithmic scaling between breakpoints", 
            "title": "logScale"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#unit_1", 
            "text": "type:  string  default:  empty  usage:  unit  will be appended to the displayed widget's value (it doesn't affect osc messages)", 
            "title": "unit"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#snap_1", 
            "text": "type:  boolean  default:  false  usage: by default, dragging the widget  vertically  will modify it's value starting from its last value. Setting this to  true  will make it snap directly to the mouse/touch position.", 
            "title": "snap"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#spring_1", 
            "text": "type:  boolean  default:  false  usage: when set to  true , the widget will go back to its initial value when released.", 
            "title": "spring"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#css_1", 
            "text": "--color-gauge:color;\n--color-knob:color;\n--color-pips:color;", 
            "title": "css"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#encoder", 
            "text": "An endless knob that only responds to rotative gestures.  {\n    type:'encoder',\n    // etc\n}", 
            "title": "Encoder"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#ticks", 
            "text": "type:  number  default:  360  usage: defines the granularity / verbosity of the encoder (number of step for a 360\u00b0 arc)", 
            "title": "ticks"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#back", 
            "text": "type:  string|number|object  default:  -1  usage: defines which value is sent when rotating the encoder anticlockwise  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "back"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#forth", 
            "text": "type:  string|number|object  default:  1  usage: defines which value is sent when rotating the encoder clockwise  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "forth"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#release", 
            "text": "type:  string|number|object  default:  empty  usage: defines which value is sent when releasing the encoder  set to  null  to send send no argument in the osc message  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "release"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#snap_2", 
            "text": "type:  boolean  default:  false  usage: by default, dragging the widget will modify it's value starting from its last value. Setting this to  true  will make it snap directly to the mouse/touch position.", 
            "title": "snap"
        }, 
        {
            "location": "/user-guide/widgets-specifics/sliders/#css_2", 
            "text": "--color-knob:color;", 
            "title": "css"
        }, 
        {
            "location": "/user-guide/widgets-specifics/switchers/", 
            "text": "Switchers\n\n\nSwitcher can store and recall the state of other widgets.\n\n\n\n\nSwitcher\n\n\nThe switcher looks like the \nswitch\n. Each of its possible values represent a bank that stores the values from the widgets listed in its \nlinkedWidgets\n attribute.  \n\n\n{\n    type:'switcher',\n    // etc\n}\n\n\n\n\nlinkedWidgets\n\n\n\n\ntype: \narray|string\n\n\ndefault:\n    \nempty\n\n\nusage:\n\n\nas a \nstring\n: a widget's \nid\n whose state changes will be stored\n\n\nas an \narray\n: a list of widget \nid\n \nstrings\n\n\n\n\n\n\n\n\nvalues\n\n\n\n\ntype: \narray|object\n\n\ndefault: \n[\"A\", \"B\"]\n\n\nusage:\n\n\narray\n of possible values to switch between : \n[1,2,3]\n\n\nobject\n of \n\"label\":value\n pairs\n\n\n\n\n\n\n\n\nCrossfader\n\n\nThe crossfader is a 2-states-only switcher that comes with a slider allowing to fade from one state to the other by interpolating the values.", 
            "title": "Switchers"
        }, 
        {
            "location": "/user-guide/widgets-specifics/switchers/#switchers", 
            "text": "Switcher can store and recall the state of other widgets.", 
            "title": "Switchers"
        }, 
        {
            "location": "/user-guide/widgets-specifics/switchers/#switcher", 
            "text": "The switcher looks like the  switch . Each of its possible values represent a bank that stores the values from the widgets listed in its  linkedWidgets  attribute.    {\n    type:'switcher',\n    // etc\n}", 
            "title": "Switcher"
        }, 
        {
            "location": "/user-guide/widgets-specifics/switchers/#linkedwidgets", 
            "text": "type:  array|string  default:\n     empty  usage:  as a  string : a widget's  id  whose state changes will be stored  as an  array : a list of widget  id   strings", 
            "title": "linkedWidgets"
        }, 
        {
            "location": "/user-guide/widgets-specifics/switchers/#values", 
            "text": "type:  array|object  default:  [\"A\", \"B\"]  usage:  array  of possible values to switch between :  [1,2,3]  object  of  \"label\":value  pairs", 
            "title": "values"
        }, 
        {
            "location": "/user-guide/widgets-specifics/switchers/#crossfader", 
            "text": "The crossfader is a 2-states-only switcher that comes with a slider allowing to fade from one state to the other by interpolating the values.", 
            "title": "Crossfader"
        }
    ]
}