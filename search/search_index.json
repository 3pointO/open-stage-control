{
    "docs": [
        {
            "location": "/", 
            "text": "Open Stage Control\n\n\nLibre and modular OSC / MIDI controller\n\n\nOpen Stage Control is a desktop OSC bi-directionnal control surface application. It's built on web technologies and run as an \nElectron\n web server that accepts any number of clients.\n\n\nTry the online demo (Chrome 50+ required)\n\n\nDownload the latest release\n\n\n\n\nSupported platforms\n\n\nThe server can run on all \nplatforms supported by Electron\n. Clients just need to connect to the server with a compatible browser :\n\n\n\n\nany system running Chrome/Chromium version \n50\n or later (Linux, MacOS, Windows, Android, etc)\n\n\niOS version \n9.3\n or later\n\n\n\n\nFirefox is \nnot\n supported.\n\n\nNeed help ? Found a bug ?\n\n\nHead over the github \nissue tracker\n :)", 
            "title": "OSC Control Surface"
        }, 
        {
            "location": "/#open-stage-control", 
            "text": "Libre and modular OSC / MIDI controller  Open Stage Control is a desktop OSC bi-directionnal control surface application. It's built on web technologies and run as an  Electron  web server that accepts any number of clients.  Try the online demo (Chrome 50+ required)  Download the latest release", 
            "title": " Open Stage Control"
        }, 
        {
            "location": "/#supported-platforms", 
            "text": "The server can run on all  platforms supported by Electron . Clients just need to connect to the server with a compatible browser :   any system running Chrome/Chromium version  50  or later (Linux, MacOS, Windows, Android, etc)  iOS version  9.3  or later   Firefox is  not  supported.", 
            "title": "Supported platforms"
        }, 
        {
            "location": "/#need-help-found-a-bug", 
            "text": "Head over the github  issue tracker  :)", 
            "title": "Need help ? Found a bug ?"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting started\n\n\n\n\nPrebuilt binaries for Linux, Windows and OS X can be found on the \nrelease\n page.\n\n\n\n\nOptions\n\n\nBelow are the available command-line options. Note that when running without any command-line switch (ie from a file browser), a launcher window will spawn to help setting them.\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-s\n\n\n--send\n\n\ndefault targets for all widgets (ip:port pairs)\n\n\n\n\n\n\n-l\n\n\n--load\n\n\nsession file to load\n\n\n\n\n\n\n-b\n\n\n--blank\n\n\nload a blank session and start the editor\n\n\n\n\n\n\n-c\n\n\n--custom-module\n\n\ncustom module file to load\n\n\n\n\n\n\n-p\n\n\n--port\n\n\nhttp port of the server (default to 8080)\n\n\n\n\n\n\n-o\n\n\n--osc-port\n\n\nosc input port (default to --port)\n\n\n\n\n\n\n-m\n\n\n--midi\n\n\nmidi router settings (requires python-pyo)\n\n\n\n\n\n\n-d\n\n\n--debug\n\n\nlog received osc messages in the console\n\n\n\n\n\n\n-n\n\n\n--no-gui\n\n\ndisable default gui\n\n\n\n\n\n\n-g\n\n\n--gui-only\n\n\napp server's url. If true, local port (--port) is used\n\n\n\n\n\n\n-t\n\n\n--theme\n\n\ntheme name or path (mutliple values allowed)\n\n\n\n\n\n\n-e\n\n\n--examples\n\n\nlist examples instead of recent sessions\n\n\n\n\n\n\n\n\n--url-options\n\n\nurl options\n (opt=value pairs)\n\n\n\n\n\n\n\n\n--disable-vsync\n\n\ndisable gui's vertical synchronization\n\n\n\n\n\n\n\n\n--disable-gpu\n\n\ndisable hardware acceleration\n\n\n\n\n\n\n\n\n--read-only\n\n\ndisable session editing and session history changes\n\n\n\n\n\n\n\n\n--instance-name\n\n\nused to differenciate multiple instances in a zeroconf network\n\n\n\n\n\n\n\n\nCommand-line only :\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-h\n\n\n--help\n\n\nprint available options\n\n\n\n\n\n\n-v\n\n\n--version\n\n\nprint version number\n\n\n\n\n\n\n\n\nExamples\n\n\n$ open-stage-control --send 127.0.0.1:5555 127.0.0.1:6666 --port 7777\n\n\n\n\nThis will create an app listening on port 7777 for synchronization messages, and sending its widgets state changes to ports 5555 and 6666.\n\n\n$ open-stage-control --no-gui --load path/to/session.js --port 9999\n\n\n\n\nThis will create a headless app available through http on port 9999 with session.js loaded automatically.\n\n\n\n\nWhat about HTTPS ?\n\n\nSecurity is out of the app's scope. If you are concerned about safety, using a private - protected - network should be enough.\n\n\n\n\nRun from sources\n\n\nRunning the app from the sources slightly differs from using built binaries : instead of running a binary, we'll launch the app with npm.\n\n\n1. Requirements\n\n\n\n\nNode.js \n= 4\n\n\nnpm\n\n\n\n\n$ sudo apt-get install nodejs npm  # install nodejs \n npm\n$ sudo npm install -g npm   # update npm\n\n\n\n\n2. Download sources\n\n\n$ git clone https://github.com/jean-emmanuel/open-stage-control\n$ cd open-stage-control/\n$ npm install\n$ npm run build\n\n\n\n\n3. Run !\n\n\n$ npm start [ -- options]\n\n\n\n\n\n\nA double hyphen (\n--\n) is used here to tell npm that the options are to be passed to the app.\n\n\n\n\nBuild from sources\n\n\n1. Requirements\n\n\n\n\nNode.js \n= 4\n\n\nnpm\n\n\n\n\n$ sudo apt-get install nodejs npm  # install nodejs \n npm\n$ sudo npm install -g npm   # update npm\n\n\n\n\n2. Build\n\n\n$ git clone https://github.com/jean-emmanuel/open-stage-control\n$ cd open-stage-control\n$ npm install\n$ export PLATFORM=TARGET_PLATFORM # TARGET_PLATFORM can be linux, win32 (windows) or darwin (os x)\n$ export ARCH=TARGET_ARCH         # TARGET_ARCH can be ia32, x64 or armv7l\n$ npm run package\n\n# Do the following if you want a deb package for debian/ubuntu\n\n$ npm run deb32\n\n# or\n\n$ npm run deb64\n\n# or\n\n$ npm run debarm\n\n\n\n\nThis will build the app in \ndist/open-stage-control-PLATFORM-ARCH\n.\n\n\n\n\nBuilding the app for windows from a linux system requires wine to be installed.*\n\n\n\n\nRunning in a headless context\n\n\nElectron, Open Stage Control's engine, is based on chromium and can't run out of the box without a display server. However, using a virtual framebuffer does the trick. Detailed instructions can be found in Electron's \ndocumentation\n.\n\n\nIn short: install \nxvfb\n and prepend your command with \nxvfb-run\n:  \n\n\n$ xvfb-run open-stage-control -n\n\n\n\n\nRunning without Electron\n\n\nIt is possible to run the server in headless mode without Electron using \nnode\n (v6 or higher) :\n\n\n$ node /path/to/packaged/open-stage-control/resources/app/ -n\n$ node /path/to/sources/open-stage-control/app/ -n", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "Prebuilt binaries for Linux, Windows and OS X can be found on the  release  page.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#options", 
            "text": "Below are the available command-line options. Note that when running without any command-line switch (ie from a file browser), a launcher window will spawn to help setting them.      Option  Description      -s  --send  default targets for all widgets (ip:port pairs)    -l  --load  session file to load    -b  --blank  load a blank session and start the editor    -c  --custom-module  custom module file to load    -p  --port  http port of the server (default to 8080)    -o  --osc-port  osc input port (default to --port)    -m  --midi  midi router settings (requires python-pyo)    -d  --debug  log received osc messages in the console    -n  --no-gui  disable default gui    -g  --gui-only  app server's url. If true, local port (--port) is used    -t  --theme  theme name or path (mutliple values allowed)    -e  --examples  list examples instead of recent sessions     --url-options  url options  (opt=value pairs)     --disable-vsync  disable gui's vertical synchronization     --disable-gpu  disable hardware acceleration     --read-only  disable session editing and session history changes     --instance-name  used to differenciate multiple instances in a zeroconf network     Command-line only :      Option  Description      -h  --help  print available options    -v  --version  print version number     Examples  $ open-stage-control --send 127.0.0.1:5555 127.0.0.1:6666 --port 7777  This will create an app listening on port 7777 for synchronization messages, and sending its widgets state changes to ports 5555 and 6666.  $ open-stage-control --no-gui --load path/to/session.js --port 9999  This will create a headless app available through http on port 9999 with session.js loaded automatically.   What about HTTPS ?  Security is out of the app's scope. If you are concerned about safety, using a private - protected - network should be enough.", 
            "title": "Options"
        }, 
        {
            "location": "/getting-started/#run-from-sources", 
            "text": "Running the app from the sources slightly differs from using built binaries : instead of running a binary, we'll launch the app with npm.  1. Requirements   Node.js  = 4  npm   $ sudo apt-get install nodejs npm  # install nodejs   npm\n$ sudo npm install -g npm   # update npm  2. Download sources  $ git clone https://github.com/jean-emmanuel/open-stage-control\n$ cd open-stage-control/\n$ npm install\n$ npm run build  3. Run !  $ npm start [ -- options]   A double hyphen ( -- ) is used here to tell npm that the options are to be passed to the app.", 
            "title": "Run from sources"
        }, 
        {
            "location": "/getting-started/#build-from-sources", 
            "text": "1. Requirements   Node.js  = 4  npm   $ sudo apt-get install nodejs npm  # install nodejs   npm\n$ sudo npm install -g npm   # update npm  2. Build  $ git clone https://github.com/jean-emmanuel/open-stage-control\n$ cd open-stage-control\n$ npm install\n$ export PLATFORM=TARGET_PLATFORM # TARGET_PLATFORM can be linux, win32 (windows) or darwin (os x)\n$ export ARCH=TARGET_ARCH         # TARGET_ARCH can be ia32, x64 or armv7l\n$ npm run package\n\n# Do the following if you want a deb package for debian/ubuntu\n\n$ npm run deb32\n\n# or\n\n$ npm run deb64\n\n# or\n\n$ npm run debarm  This will build the app in  dist/open-stage-control-PLATFORM-ARCH .   Building the app for windows from a linux system requires wine to be installed.*", 
            "title": "Build from sources"
        }, 
        {
            "location": "/getting-started/#running-in-a-headless-context", 
            "text": "Electron, Open Stage Control's engine, is based on chromium and can't run out of the box without a display server. However, using a virtual framebuffer does the trick. Detailed instructions can be found in Electron's  documentation .  In short: install  xvfb  and prepend your command with  xvfb-run :    $ xvfb-run open-stage-control -n", 
            "title": "Running in a headless context"
        }, 
        {
            "location": "/getting-started/#running-without-electron", 
            "text": "It is possible to run the server in headless mode without Electron using  node  (v6 or higher) :  $ node /path/to/packaged/open-stage-control/resources/app/ -n\n$ node /path/to/sources/open-stage-control/app/ -n", 
            "title": "Running without Electron"
        }, 
        {
            "location": "/interface/", 
            "text": "User interface\n\n\nSidepanel\n\n\nThe sidepanel can be opened by clicking the navigation icon in the upper right corner or by pressing F10.\n\n\nState management\n\n\n\n\nStore: save the state of all widgets in the temporary slot\n\n\nRecall: reload saved state from the temporary slot\n\n\nSend All: make all widgets send their current value\n\n\nExport: save the state of all widgets to a \n.preset\n file\n\n\nImport: load a state from a \n.preset\n file\n\n\n\n\nTraversing gestures\n\n\nBy default, a dragging gesture can only affect the widget it started on. Enabling traversing gesture does two things:\n\n\n\n\nmake gestures affect every widgets no matter where they started\n\n\nmake sliders-like widgets respond as if their \nsnap\n option is enabled\n\n\n\n\nEditor\n\n\nSee \nEditing sessions\n.\n\n\nInteractions\n\n\n\n\n\n\n\n\nMouse\n\n\nTouch\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nTap\n\n\nHandled at pressing time, not releasing.\n\n\n\n\n\n\nDouble Click\n\n\nDouble Tap\n\n\nSome widgets handle double click / tap events.\n\n\n\n\n\n\nRight-click\n\n\nLong touch\n\n\nWidgets that have only one value input will give focus to it when receiving this event. When the editor is enabled, Right-click / Long touch spawns the editor's context menu.\n\n\n\n\n\n\nDrag\n\n\nDrag\n\n\nThe widgets respond to mouse and touch drag gestures with a 1:1 precision ratio.\n\n\n\n\n\n\nCtrl\n + Drag\n\n\n\n\nHolding the \nCtrl\n key while dragging with the mouse increases the gesture's precision by 10.\n\n\n\n\n\n\n\n\nTwo-fingers drag (single target)\n\n\nUsing two on a single-touch target increases the gesture's precision by 10.", 
            "title": "User interface"
        }, 
        {
            "location": "/interface/#user-interface", 
            "text": "", 
            "title": "User interface"
        }, 
        {
            "location": "/interface/#sidepanel", 
            "text": "The sidepanel can be opened by clicking the navigation icon in the upper right corner or by pressing F10.", 
            "title": "Sidepanel"
        }, 
        {
            "location": "/interface/#state-management", 
            "text": "Store: save the state of all widgets in the temporary slot  Recall: reload saved state from the temporary slot  Send All: make all widgets send their current value  Export: save the state of all widgets to a  .preset  file  Import: load a state from a  .preset  file", 
            "title": "State management"
        }, 
        {
            "location": "/interface/#traversing-gestures", 
            "text": "By default, a dragging gesture can only affect the widget it started on. Enabling traversing gesture does two things:   make gestures affect every widgets no matter where they started  make sliders-like widgets respond as if their  snap  option is enabled", 
            "title": "Traversing gestures"
        }, 
        {
            "location": "/interface/#editor", 
            "text": "See  Editing sessions .", 
            "title": "Editor"
        }, 
        {
            "location": "/interface/#interactions", 
            "text": "Mouse  Touch  Description      Click  Tap  Handled at pressing time, not releasing.    Double Click  Double Tap  Some widgets handle double click / tap events.    Right-click  Long touch  Widgets that have only one value input will give focus to it when receiving this event. When the editor is enabled, Right-click / Long touch spawns the editor's context menu.    Drag  Drag  The widgets respond to mouse and touch drag gestures with a 1:1 precision ratio.    Ctrl  + Drag   Holding the  Ctrl  key while dragging with the mouse increases the gesture's precision by 10.     Two-fingers drag (single target)  Using two on a single-touch target increases the gesture's precision by 10.", 
            "title": "Interactions"
        }, 
        {
            "location": "/editing-sessions/", 
            "text": "Editing sessions\n\n\nThe session editor can be enabled from the sidepanel. Once enabled, clicking on a widget will make it the \nselected widget\n.\n\n\nRoot panel\n\n\nThe root panel can be selected by clicking on the \"Root\" button in the sidepanel.\n\n\nContext menu\n\n\nRight clicking / long touch on a widget or on a tab will also display a context menu providing useful utilities :\n\n\n\n\nEdit parent\n: select widget's parent for edition\n\n\nCopy\n: copy widget's data\n\n\nCut\n: copy widget's data and delete selected widget\n\n\nPaste\n: paste copied widget in selected container\n\n\nn+1\n : increments the id of the copied widget (and all its children) before pasting\n\n\nClone\n : paste the exact same widget\n\n\nAdd widget\n: create a new widget in selected container\n\n\nAdd tab\n: create a new tab in selected container\n\n\nDelete\n: delete selected tab or widget\n\n\n\n\nSave\n\n\nCurrent session can be exported as a \n.json\n file. When overwriting a session file that's currently is use by other clients, they will reload it automatically.\n\n\nLoad\n\n\nLoading a session file doesn't affect other clients.\n\n\nGrid\n\n\nBy default, widget resizing / dragging snaps to a 10 pixel wide grid. Its width can be customized in the editor (when it's enabled). Setting its width to 1 will disable it. Note that the grid doesn't affect manual setting of a widget's size / position.\n\n\nProperties\n\n\nSelected widget's properties are displayed and can be modified in the sidepanel. The \nwidgets reference\n section lists the available properties for each widget type. Property fields are all multiline (press \nshit + enter\n for new line).\n\n\nProperties are written in JSON, with some flexibility brought by the \nJSON5\n format. For example, doubles quotes around object keys are not mandatory. All input will be converted to standard JSON.\n\n\nWidget resizing / dragging\n\n\nSelected widget can be resized using its south, south-east and east handles. It can be dragged with its north-west handle.", 
            "title": "Editing sessions"
        }, 
        {
            "location": "/editing-sessions/#editing-sessions", 
            "text": "The session editor can be enabled from the sidepanel. Once enabled, clicking on a widget will make it the  selected widget .", 
            "title": "Editing sessions"
        }, 
        {
            "location": "/editing-sessions/#root-panel", 
            "text": "The root panel can be selected by clicking on the \"Root\" button in the sidepanel.", 
            "title": "Root panel"
        }, 
        {
            "location": "/editing-sessions/#context-menu", 
            "text": "Right clicking / long touch on a widget or on a tab will also display a context menu providing useful utilities :   Edit parent : select widget's parent for edition  Copy : copy widget's data  Cut : copy widget's data and delete selected widget  Paste : paste copied widget in selected container  n+1  : increments the id of the copied widget (and all its children) before pasting  Clone  : paste the exact same widget  Add widget : create a new widget in selected container  Add tab : create a new tab in selected container  Delete : delete selected tab or widget", 
            "title": "Context menu"
        }, 
        {
            "location": "/editing-sessions/#save", 
            "text": "Current session can be exported as a  .json  file. When overwriting a session file that's currently is use by other clients, they will reload it automatically.", 
            "title": "Save"
        }, 
        {
            "location": "/editing-sessions/#load", 
            "text": "Loading a session file doesn't affect other clients.", 
            "title": "Load"
        }, 
        {
            "location": "/editing-sessions/#grid", 
            "text": "By default, widget resizing / dragging snaps to a 10 pixel wide grid. Its width can be customized in the editor (when it's enabled). Setting its width to 1 will disable it. Note that the grid doesn't affect manual setting of a widget's size / position.", 
            "title": "Grid"
        }, 
        {
            "location": "/editing-sessions/#properties", 
            "text": "Selected widget's properties are displayed and can be modified in the sidepanel. The  widgets reference  section lists the available properties for each widget type. Property fields are all multiline (press  shit + enter  for new line).  Properties are written in JSON, with some flexibility brought by the  JSON5  format. For example, doubles quotes around object keys are not mandatory. All input will be converted to standard JSON.", 
            "title": "Properties"
        }, 
        {
            "location": "/editing-sessions/#widget-resizing-dragging", 
            "text": "Selected widget can be resized using its south, south-east and east handles. It can be dragged with its north-west handle.", 
            "title": "Widget resizing / dragging"
        }, 
        {
            "location": "/widgets/widgets/", 
            "text": "Widgets properties\n\n\nAll widgets share a set of generic properties described below.\n\n\nBasics\n\n\ntype\n\n\n\n\ntype: \nstring\n\n\ndefault: \nfader\n\n\n\n\nid\n\n\n\n\ntype: \nstring\n\n\ndefault: generated unique 'widget_n'\n\n\nusage: widgets sharing the same \nid\n will act as clones and update each other's value(s) without sending extra osc messages.\n\n\n\n\nlinkId\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: widgets sharing the same \nlinkId\n update each other's value(s) AND send their respective osc messages.\n\n\n\n\nStyle\n\n\nlabel\nflash_on\n\n\n\n\ntype: \nstring|false\n\n\ndefault: \nauto\n, which displays \nid\n\n\nusage:\n\n\nset to \nfalse\n to hide completely\n\n\ninsert icons from \nFontAwesome\n using the prefix \n^\n followed by the icon's name : \nmade with ^heart\n, etc\n\n\n\n\n\n\n\n\ntop\nflash_on\n / \nleft\nflash_on\n\n\n\n\ntype: \nnumber|percentage\n\n\ndefault: \nauto\n\n\nusage:\n\n\nwhen both \ntop\n and \nleft\n are set to \nauto\n, the widget is positioned according to the normal flow of the page (from left to right, by order of creation).\n\n\notherwise, the widget will be absolutely positioned\n\n\n\n\n\n\n\n\nwidth\nflash_on\n / \nheight\nflash_on\n\n\n\n\ntype: \nnumber|percentage\n\n\ndefault: \nauto\n\n\n\n\ncolor\nflash_on\n\n\n\n\ntype: \nstring\n\n\ndefault: \nauto\n, inherited accent color\n\n\nusage: any valid \ncss\n color code is valid, this will change the default accent color for the widget and all its children\n\n\n\n\ncss\nflash_on\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: the \ncss\n property can be used to override inherited \ntheming\n variables. Also, some widgets expose specific theming variables that allow a finer customization. Standard \ncss\n properties can be applied to the widget's root element through this property, \ncss\n selectors can also be used apply custom styles to the widget's children.\n\n\nexamples:\n\n\nborder-radius:5rem; .label\u00a0{font-size: 20rem}\n will round the widget's corners and increase its label's font-size and all its children's labels'\n\n\nborder-radius:5rem; \n .label\u00a0{font-size: 20rem}\n will round the widget's corners and increase its label's font-size (the \n selector targets only the direct children of the widget element)\n\n\n\n\n\n\n\n\nOSC\n\n\nvalue\nflash_on\n\n\n\n\ntype: \n*\n\n\ndefault: \nempty\n\n\nusage: if set, the widget will be initialized with this \nvalue\n. This won't send any osc message unless it is changed because of a property inheritance update initiated by an action that should send osc (e.g. dragging a slider).\n\n\nnote: its \ntype\n must match the widget's value type (ie a \nnumber\n for sliders, an \narray\n for pads, etc).\n\n\n\n\nprecision\nflash_on\n\n\n\n\ntype: \ninteger|string\n\n\ndefault: \n2\n\n\nusage: the \nprecision\n property defines the number of decimals to display and to send.\n\n\nset to \n0\n to send \nintegers\n only.\n\n\na specific data type can be specified by appending a valid osc type tag to the precision value, for example : \n3d\n will make the widget send double precision numbers rounded to three decimals\n\n\n\n\ntarget\nflash_on\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage:\n\n\nthis defines the targets of the widget's osc messages\n\n\neach element of the \narray\n must be a string formatted as follows : \nip:port\n\n\nmultiple targets can be specified : \n[\nip1:port1\n,\nip2:port2\n]\n\n\nif \nmidi\n is enabled, targets can be \nmidi:device_name\n\n\nspecial item \nself\n can be used to refer to the emitting client directly\n\n\nif no target is set (empty array \n[]\n), messages can still be sent if the server has defaults targets (\n-s / --send\n)\n\n\nto disable osc regardless of the previous point, set \ntarget\n to \n[null]\n\n\n\n\n\n\n\n\naddress\nflash_on\n\n\n\n\ntype: \nstring\n\n\ndefault: \n/widgets_id\n\n\nusage: this is the \naddress\n of the osc messages sent by the widget, it must start with a \n/\n\n\n\n\ntouchAddress\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: sliders and pads can send special osc messages to inform weither they are currently touched or not. The osc message will be of the following form :\n\n    /touch/address [preArgs] 0/1\n\n\n\n\n\npreArgs\nflash_on\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage:\n\n\neach element of the \narray\n defines a constant value that will be prepended to the osc message\n\n\nvalues can be defined as objects if the osc data type needs to be specified (ie different from the default implied by the \nprecision\n option)\n\n\n\n\n\n\nexample:\n\npreArgs\n:\n \n[\n\n    \n1\n,\n        \n// this will always be sent as a string\n\n    \n0.5\n,\n        \n// this will be sent as an integer if precision equals 0\n\n    \n1\n,\n          \n// this will be sent as float if precision is different from 0\n\n    \n{\n\n        \ntype\n:\nf\n,\n\n        \nvalue\n:\n0.5\n\n    \n},\n\n    \n{\n\n        \ntype\n:\ni\n,\n\n        \nvalue\n:\n1\n\n    \n},\n\n    \n{\n\n        \ntype\n:\nT\n,\n\n        \nvalue\n:\ntrue\n\n    \n},\n\n    \n{\n\n        \ntype\n:\nF\n,\n\n        \nvalue\n:\nfalse\n\n    \n}\n\n\n]", 
            "title": "Widget properties"
        }, 
        {
            "location": "/widgets/widgets/#widgets-properties", 
            "text": "All widgets share a set of generic properties described below.", 
            "title": "Widgets properties"
        }, 
        {
            "location": "/widgets/widgets/#basics", 
            "text": "", 
            "title": "Basics"
        }, 
        {
            "location": "/widgets/widgets/#type", 
            "text": "type:  string  default:  fader", 
            "title": "type"
        }, 
        {
            "location": "/widgets/widgets/#id", 
            "text": "type:  string  default: generated unique 'widget_n'  usage: widgets sharing the same  id  will act as clones and update each other's value(s) without sending extra osc messages.", 
            "title": "id"
        }, 
        {
            "location": "/widgets/widgets/#linkid", 
            "text": "type:  string  default:  empty  usage: widgets sharing the same  linkId  update each other's value(s) AND send their respective osc messages.", 
            "title": "linkId"
        }, 
        {
            "location": "/widgets/widgets/#style", 
            "text": "", 
            "title": "Style"
        }, 
        {
            "location": "/widgets/widgets/#labelflash_on", 
            "text": "type:  string|false  default:  auto , which displays  id  usage:  set to  false  to hide completely  insert icons from  FontAwesome  using the prefix  ^  followed by the icon's name :  made with ^heart , etc", 
            "title": "labelflash_on"
        }, 
        {
            "location": "/widgets/widgets/#topflash_on-leftflash_on", 
            "text": "type:  number|percentage  default:  auto  usage:  when both  top  and  left  are set to  auto , the widget is positioned according to the normal flow of the page (from left to right, by order of creation).  otherwise, the widget will be absolutely positioned", 
            "title": "topflash_on / leftflash_on"
        }, 
        {
            "location": "/widgets/widgets/#widthflash_on-heightflash_on", 
            "text": "type:  number|percentage  default:  auto", 
            "title": "widthflash_on / heightflash_on"
        }, 
        {
            "location": "/widgets/widgets/#colorflash_on", 
            "text": "type:  string  default:  auto , inherited accent color  usage: any valid  css  color code is valid, this will change the default accent color for the widget and all its children", 
            "title": "colorflash_on"
        }, 
        {
            "location": "/widgets/widgets/#cssflash_on", 
            "text": "type:  string  default:  empty  usage: the  css  property can be used to override inherited  theming  variables. Also, some widgets expose specific theming variables that allow a finer customization. Standard  css  properties can be applied to the widget's root element through this property,  css  selectors can also be used apply custom styles to the widget's children.  examples:  border-radius:5rem; .label\u00a0{font-size: 20rem}  will round the widget's corners and increase its label's font-size and all its children's labels'  border-radius:5rem;   .label\u00a0{font-size: 20rem}  will round the widget's corners and increase its label's font-size (the   selector targets only the direct children of the widget element)", 
            "title": "cssflash_on"
        }, 
        {
            "location": "/widgets/widgets/#osc", 
            "text": "", 
            "title": "OSC"
        }, 
        {
            "location": "/widgets/widgets/#valueflash_on", 
            "text": "type:  *  default:  empty  usage: if set, the widget will be initialized with this  value . This won't send any osc message unless it is changed because of a property inheritance update initiated by an action that should send osc (e.g. dragging a slider).  note: its  type  must match the widget's value type (ie a  number  for sliders, an  array  for pads, etc).", 
            "title": "valueflash_on"
        }, 
        {
            "location": "/widgets/widgets/#precisionflash_on", 
            "text": "type:  integer|string  default:  2  usage: the  precision  property defines the number of decimals to display and to send.  set to  0  to send  integers  only.  a specific data type can be specified by appending a valid osc type tag to the precision value, for example :  3d  will make the widget send double precision numbers rounded to three decimals", 
            "title": "precisionflash_on"
        }, 
        {
            "location": "/widgets/widgets/#targetflash_on", 
            "text": "type:  array  default:  []  usage:  this defines the targets of the widget's osc messages  each element of the  array  must be a string formatted as follows :  ip:port  multiple targets can be specified :  [ ip1:port1 , ip2:port2 ]  if  midi  is enabled, targets can be  midi:device_name  special item  self  can be used to refer to the emitting client directly  if no target is set (empty array  [] ), messages can still be sent if the server has defaults targets ( -s / --send )  to disable osc regardless of the previous point, set  target  to  [null]", 
            "title": "targetflash_on"
        }, 
        {
            "location": "/widgets/widgets/#addressflash_on", 
            "text": "type:  string  default:  /widgets_id  usage: this is the  address  of the osc messages sent by the widget, it must start with a  /", 
            "title": "addressflash_on"
        }, 
        {
            "location": "/widgets/widgets/#touchaddress", 
            "text": "type:  string  default:  empty  usage: sliders and pads can send special osc messages to inform weither they are currently touched or not. The osc message will be of the following form :     /touch/address [preArgs] 0/1", 
            "title": "touchAddress"
        }, 
        {
            "location": "/widgets/widgets/#preargsflash_on", 
            "text": "type:  array  default:  []  usage:  each element of the  array  defines a constant value that will be prepended to the osc message  values can be defined as objects if the osc data type needs to be specified (ie different from the default implied by the  precision  option)    example: preArgs :   [ \n     1 ,          // this will always be sent as a string \n     0.5 ,          // this will be sent as an integer if precision equals 0 \n     1 ,            // this will be sent as float if precision is different from 0 \n     { \n         type : f , \n         value : 0.5 \n     }, \n     { \n         type : i , \n         value : 1 \n     }, \n     { \n         type : T , \n         value : true \n     }, \n     { \n         type : F , \n         value : false \n     }  ]", 
            "title": "preArgsflash_on"
        }, 
        {
            "location": "/widgets/containers/", 
            "text": "Containers\n\n\nContainers can contain any widgets.\n\n\nPanel\n\n\nPanels can contains tabs or widgets. These can be absolutely positioned and can overflow their parent's size (which will then display scrollbars). When a panel contains tabs, it can send and receive its active tab's index through osc.\n\n\n{\n\n    \ntype\n:\npanel\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nscroll\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: set to \nfalse\n to disable scrollbars\n\n\n\n\nborder\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: by default, widgets in panels/strip have their border disabled, except for panels and strips. Set to \nfalse\n to apply this rule to the panel too.\n\n\n\n\nwidgets\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage: each element of the \narray\n must be a widget \nobject\n. A panel cannot contain widgets and tabs simultaneously.\n\n\n\n\ntabs\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage: each element of the \narray\n must be a tab \nobject\n. A panel cannot contain widgets and tabs simultaneously.\n\n\n\n\nvariables\nflash_on\n\n\n\n\ntype: \n*\n\n\ndefault: \n@{parent.variables}\n\n\nusage: defines one or more arbitrary variables that can be inherited by children widgets.\n\n\nexamples:\n\n\n1\n (\n@{parent.variables}\n will return \n1\n)\n\n\n{a: [1, 2], b: 2}\n (\n@{parent.variables.a}\n will return \n[1, 2]\n)\n\n\n[1, 2]\n (\n@{parent.variables.0}\n will return \n1\n)\n\n\n@{parent.variables}\n useful when nesting containers\n\n\n\n\nlayout\n\n\n\n\ntype: \nstring\n\n\ndefault: \n''\n\n\nusage: \nlayout\n must be a valid \nVisual Format Language\n expression. It accepts the \nExtended Visual Format Language\n as well. Widgets are targeted using their \nid\n or their index prefixed with a \n$\n (\n$0, $1, etc\n), the latter method being incompatible with the \nrange spread operator\n. Expressions can be tested and debugged with the online \nVisual Format Editor\n.\n\n\nnote: this only applies when the panel contains widgets, not tabs\n\n\n\n\nspacing\n\n\n\n\ntype: \ninteger|array\n\n\ndefault: \n0\n\n\nusage: spacing size used in \nlayout\n expression, can be set as a \n[vertical,horizontal]\n array.\n\n\nnote: this only applies when the panel contains widgets, not tabs\n\n\n\n\nnoSync\nflash_on\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to prevent tab changes from synchronizing between clients that share the same session file\n\n\n\n\nStrip\n\n\nUnidirectionnal panel with stretching capability. By default, children widgets that don't have an explicit \nwidth\n/\nheight\n set will be shrinked to respect the sizes specified by others. Adding \nflex:1;\n to a children's \ncss\n will give it the ability the fill the remaining space. Multiple children can have a \nflex:x;\n css property (\nx\n will ponderate their expansion).\n\n\n{\n\n  \ntype\n:\nstrip\n,\n\n  \n// etc\n\n\n}\n\n\n\n\n\nhorizontal\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display widgets horizontally\n\n\n\n\nstretch\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to stretch widgets evenly\n\n\n\n\nspacing\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n0\n\n\nusage: adds space between widgets\n\n\n\n\nborder\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: by default, widgets in panels/strip have their border disabled, except for panels and strips. Set to \nfalse\n to apply this rule to the strip too.\n\n\n\n\nwidgets\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage: each element of the \narray\n must be a widget \nobject\n\n\n\n\nModal\n\n\nModals are buttons that turn into a centered popup panels when enabled. They can only contain widgets. They can send and receive their state via osc (1 to enable, 0 to disable).\n\n\n{\n\n    \ntype\n:\nmodal\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\ndoubleTap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to make the modal require a double tap to open instead of a single tap\n\n\n\n\npopupWidth\n / \npopupHeight\n\n\n\n\ntype: \nnumber|percentage\n\n\ndefault: \n100%\n\n\nusage: sets the modal's size once opened\n\n\n\n\npopupLabel\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: alternative label for the popup\n\n\n\n\nnoSync\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to prevent modal's state changes from synchronizing between clients that share the same session file\n\n\n\n\noptions\n\n\n\n\nsee panel's \noptions\n\n\n\n\nClone\n\n\n{\n\n    \ntype\n:\nclone\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nwidgetId\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: \nid\n of the widget to clone\n\n\n\n\nprops\n\n\n\n\ntype: \nobject\n\n\ndefault: \n{}\n\n\nusage: cloned widget's properties to override\n\n\nexample:\n\n{\n\n    \nvariables\n:\n \n{\n \nn\n:\n \n2\n \n},\n\n    \ncolor\n:\n \norange\n    \n\n}", 
            "title": "Containers"
        }, 
        {
            "location": "/widgets/containers/#containers", 
            "text": "Containers can contain any widgets.", 
            "title": "Containers"
        }, 
        {
            "location": "/widgets/containers/#panel", 
            "text": "Panels can contains tabs or widgets. These can be absolutely positioned and can overflow their parent's size (which will then display scrollbars). When a panel contains tabs, it can send and receive its active tab's index through osc.  { \n     type : panel , \n     // etc  }", 
            "title": "Panel"
        }, 
        {
            "location": "/widgets/containers/#scroll", 
            "text": "type:  boolean  default:  true  usage: set to  false  to disable scrollbars", 
            "title": "scroll"
        }, 
        {
            "location": "/widgets/containers/#border", 
            "text": "type:  boolean  default:  true  usage: by default, widgets in panels/strip have their border disabled, except for panels and strips. Set to  false  to apply this rule to the panel too.", 
            "title": "border"
        }, 
        {
            "location": "/widgets/containers/#widgets", 
            "text": "type:  array  default:  []  usage: each element of the  array  must be a widget  object . A panel cannot contain widgets and tabs simultaneously.", 
            "title": "widgets"
        }, 
        {
            "location": "/widgets/containers/#tabs", 
            "text": "type:  array  default:  []  usage: each element of the  array  must be a tab  object . A panel cannot contain widgets and tabs simultaneously.", 
            "title": "tabs"
        }, 
        {
            "location": "/widgets/containers/#variablesflash_on", 
            "text": "type:  *  default:  @{parent.variables}  usage: defines one or more arbitrary variables that can be inherited by children widgets.  examples:  1  ( @{parent.variables}  will return  1 )  {a: [1, 2], b: 2}  ( @{parent.variables.a}  will return  [1, 2] )  [1, 2]  ( @{parent.variables.0}  will return  1 )  @{parent.variables}  useful when nesting containers", 
            "title": "variablesflash_on"
        }, 
        {
            "location": "/widgets/containers/#layout", 
            "text": "type:  string  default:  ''  usage:  layout  must be a valid  Visual Format Language  expression. It accepts the  Extended Visual Format Language  as well. Widgets are targeted using their  id  or their index prefixed with a  $  ( $0, $1, etc ), the latter method being incompatible with the  range spread operator . Expressions can be tested and debugged with the online  Visual Format Editor .  note: this only applies when the panel contains widgets, not tabs", 
            "title": "layout"
        }, 
        {
            "location": "/widgets/containers/#spacing", 
            "text": "type:  integer|array  default:  0  usage: spacing size used in  layout  expression, can be set as a  [vertical,horizontal]  array.  note: this only applies when the panel contains widgets, not tabs", 
            "title": "spacing"
        }, 
        {
            "location": "/widgets/containers/#nosyncflash_on", 
            "text": "type:  boolean  default:  false  usage: set to  true  to prevent tab changes from synchronizing between clients that share the same session file", 
            "title": "noSyncflash_on"
        }, 
        {
            "location": "/widgets/containers/#strip", 
            "text": "Unidirectionnal panel with stretching capability. By default, children widgets that don't have an explicit  width / height  set will be shrinked to respect the sizes specified by others. Adding  flex:1;  to a children's  css  will give it the ability the fill the remaining space. Multiple children can have a  flex:x;  css property ( x  will ponderate their expansion).  { \n   type : strip , \n   // etc  }", 
            "title": "Strip"
        }, 
        {
            "location": "/widgets/containers/#horizontal", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display widgets horizontally", 
            "title": "horizontal"
        }, 
        {
            "location": "/widgets/containers/#stretch", 
            "text": "type:  boolean  default:  false  usage: set to  true  to stretch widgets evenly", 
            "title": "stretch"
        }, 
        {
            "location": "/widgets/containers/#spacing_1", 
            "text": "type:  integer  default:  0  usage: adds space between widgets", 
            "title": "spacing"
        }, 
        {
            "location": "/widgets/containers/#border_1", 
            "text": "type:  boolean  default:  true  usage: by default, widgets in panels/strip have their border disabled, except for panels and strips. Set to  false  to apply this rule to the strip too.", 
            "title": "border"
        }, 
        {
            "location": "/widgets/containers/#widgets_1", 
            "text": "type:  array  default:  []  usage: each element of the  array  must be a widget  object", 
            "title": "widgets"
        }, 
        {
            "location": "/widgets/containers/#modal", 
            "text": "Modals are buttons that turn into a centered popup panels when enabled. They can only contain widgets. They can send and receive their state via osc (1 to enable, 0 to disable).  { \n     type : modal , \n     // etc  }", 
            "title": "Modal"
        }, 
        {
            "location": "/widgets/containers/#doubletap", 
            "text": "type:  boolean  default:  false  usage: set to  true  to make the modal require a double tap to open instead of a single tap", 
            "title": "doubleTap"
        }, 
        {
            "location": "/widgets/containers/#popupwidth-popupheight", 
            "text": "type:  number|percentage  default:  100%  usage: sets the modal's size once opened", 
            "title": "popupWidth / popupHeight"
        }, 
        {
            "location": "/widgets/containers/#popuplabel", 
            "text": "type:  string  default:  empty  usage: alternative label for the popup", 
            "title": "popupLabel"
        }, 
        {
            "location": "/widgets/containers/#nosync", 
            "text": "type:  boolean  default:  false  usage: set to  true  to prevent modal's state changes from synchronizing between clients that share the same session file", 
            "title": "noSync"
        }, 
        {
            "location": "/widgets/containers/#options", 
            "text": "see panel's  options", 
            "title": "options"
        }, 
        {
            "location": "/widgets/containers/#clone", 
            "text": "{ \n     type : clone , \n     // etc  }", 
            "title": "Clone"
        }, 
        {
            "location": "/widgets/containers/#widgetid", 
            "text": "type:  string  default:  empty  usage:  id  of the widget to clone", 
            "title": "widgetId"
        }, 
        {
            "location": "/widgets/containers/#props", 
            "text": "type:  object  default:  {}  usage: cloned widget's properties to override  example: { \n     variables :   {   n :   2   }, \n     color :   orange      }", 
            "title": "props"
        }, 
        {
            "location": "/widgets/sliders/", 
            "text": "Sliders\n\n\nSliders are unidimensional widgets that output one value at a time.\n\n\nFader\n\n\n{\n\n    \ntype\n:\nfader\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nhorizontal\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display the fader horizontally\n\n\n\n\nalignRight\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to invert the pip's and fader's position\n\n\n\n\npips\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: set to \nfalse\n to hide the scale\n\n\n\n\ninput\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: set to \nfalse\n to hide the built-in input\n\n\n\n\ncompact\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display a compact alternative for the widget. Disables default mouse/touch focusing on the value display (right-click/long-touch still triggers it).\n\n\n\n\ndashed\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display a dashed gauge\n\n\n\n\nrange\n\n\n\n\ntype: \nobject\n\n\ndefault: \n{\nmin\n:0,\nmax\n:1}\n\n\nusage: \nrange\n defines the breakpoints of the fader's scale\n\n\nkeys can be percentages and/or \nmin\n / \nmax\n\n\nvalues can be \nnumber\n or \nobject\n if a custom label is needed\n\n\n\n\n\n\nexample:\n\nrange\n:\n \n{\n\n    \nmin\n:\n0\n,\n\n    \n50%\n:\n1\n,\n        \n    \nmax\n:\n \n{\ninf\n:\n10\n}\n \n// \ninf\n will be used as a custom label on the scale\n\n\n}\n\n\n\n\n\n\norigin\n\n\n\n\ntype: \nnumber\n\n\ndefault: \nauto\n\n\nusage: \norigin\n defines the starting point's value of the fader's gauge\n\n\n\n\nlogScale\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n use logarithmic scaling between breakpoints (log10)\n\n\n\n\nunit\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: \nunit\n will be appended to the displayed widget's value (it doesn't affect osc messages)\n\n\n\n\nsnap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: by default, dragging the widget will modify it's value starting from its last value. Setting this to \ntrue\n will make it snap directly to the mouse/touch position.\n\n\n\n\nspring\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: when set to \ntrue\n, the widget will go back to its initial value when released.\n\n\n\n\ndoubleTap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to make the fader reset to its initial value when receiving a double tap\n\n\n\n\nmeter\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to true to display a vu-meter next in the fader\n\n\nthe meter's \nid\n will be the same as the widget's with \n/meter\n appended to it\n\n\nthe meter's \naddress\nwill be the same as the widget's with \n/meter\n appended to it\n\n\n\n\n\n\n\n\nmeterAddress\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nempty\n\n\nusage: overrides the \nmeter\n's osc address\n\n\n\n\ncss\n\n\n--color-gauge:color;\n--color-knob:color;\n--color-pips:color;\n\n\n\n\nKnob\n\n\n{\n\n    \ntype\n:\nknob\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\npips\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: set to \nfalse\n to hide the scale\n\n\n\n\ninput\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: set to \nfalse\n to hide the built-in input\n\n\n\n\ncompact\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display a compact alternative for the widget. Disables default mouse/touch focusing on the value display (right-click/long-touch still triggers it).\n\n\n\n\nangle\n\n\n\n\ntype: \nnumber\n\n\ndefault: \n270\n\n\nusage: \nangle\n defines the angle's width of the knob, in degrees\n\n\n\n\nrange\n\n\n\n\ntype: \nobject\n\n\ndefault: \n{\nmin\n:0,\nmax\n:1}\n\n\nusage: \nrange\n defines the breakpoints of the fader's scale\n\n\nkeys can be percentages and/or \nmin\n / \nmax\n\n\nvalues can be \nnumber\n or \nobject\n if a custom label is needed\n\n\n\n\n\n\nexample:\n\nrange\n:\n \n{\n\n    \nmin\n:\n0\n,\n\n    \n50%\n:\n1\n,\n        \n    \nmax\n:\n \n{\ninf\n:\n10\n}\n \n// \ninf\n will be used as a custom label on the scale\n\n\n}\n\n\n\n\n\n\norigin\n\n\n\n\ntype: \nnumber\n\n\ndefault: \nauto\n\n\nusage: \norigin\n defines the starting point's value of the knob's gauge\n\n\n\n\nlogScale\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n use logarithmic scaling between breakpoints\n\n\n\n\nunit\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: \nunit\n will be appended to the displayed widget's value (it doesn't affect osc messages)\n\n\n\n\nsnap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: by default, dragging the widget \nvertically\n will modify it's value starting from its last value. Setting this to \ntrue\n will make it snap directly to the mouse/touch position.\n\n\n\n\nspring\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: when set to \ntrue\n, the widget will go back to its initial value when released.\n\n\n\n\ndoubleTap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to make the knob reset to its initial value when receiving a double tap\n\n\n\n\ncss\n\n\n--color-gauge:color;\n--color-knob:color;\n--color-pips:color;\n\n\n\n\nEncoder\n\n\nAn endless knob that only responds to rotative gestures.\n\n\n{\n\n    \ntype\n:\nencoder\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nticks\n\n\n\n\ntype: \nnumber\n\n\ndefault: \n360\n\n\nusage: defines the granularity / verbosity of the encoder (number of step for a 360\u00b0 arc)\n\n\n\n\nback\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \n-1\n\n\nusage: defines which value is sent when rotating the encoder anticlockwise\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\nforth\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \n1\n\n\nusage: defines which value is sent when rotating the encoder clockwise\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\nrelease\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \nempty\n\n\nusage: defines which value is sent when releasing the encoder\n\n\nset to \nnull\n to send send no argument in the osc message\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\nsnap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: by default, dragging the widget will modify it's value starting from its last value. Setting this to \ntrue\n will make it snap directly to the mouse/touch position.\n\n\n\n\ndoubleTap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to make the encoder reset to its initial value when receiving a double tap\n\n\n\n\ncss\n\n\n--color-knob:color;\n\n\n\n\nRange\n\n\nA range is a fader with two handles. To move the range (both handles at once), hold the \nshift\n key or use two fingers.\n\n\n{\n\n    \ntype\n:\nrange\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean|object\n\n\ndefault: \nfalse\n\n\nusage:\n\n\nset to \ntrue\n to send separate osc messages for \nlow\n and \nhigh\n handles. The \naddress\n will be the same as the widget's with \n/low\n or \n/high\n appended to it\n\n\ncan be set as an object to specify a different \naddress\n : \n['/osc_address_low', '/osc_address_high']\n\n\n\n\n\n\nnote: the widget will only respond to its original osc address, not to the splitted version", 
            "title": "Sliders"
        }, 
        {
            "location": "/widgets/sliders/#sliders", 
            "text": "Sliders are unidimensional widgets that output one value at a time.", 
            "title": "Sliders"
        }, 
        {
            "location": "/widgets/sliders/#fader", 
            "text": "{ \n     type : fader , \n     // etc  }", 
            "title": "Fader"
        }, 
        {
            "location": "/widgets/sliders/#horizontal", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display the fader horizontally", 
            "title": "horizontal"
        }, 
        {
            "location": "/widgets/sliders/#alignright", 
            "text": "type:  boolean  default:  false  usage: set to  true  to invert the pip's and fader's position", 
            "title": "alignRight"
        }, 
        {
            "location": "/widgets/sliders/#pips", 
            "text": "type:  boolean  default:  true  usage: set to  false  to hide the scale", 
            "title": "pips"
        }, 
        {
            "location": "/widgets/sliders/#input", 
            "text": "type:  boolean  default:  true  usage: set to  false  to hide the built-in input", 
            "title": "input"
        }, 
        {
            "location": "/widgets/sliders/#compact", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display a compact alternative for the widget. Disables default mouse/touch focusing on the value display (right-click/long-touch still triggers it).", 
            "title": "compact"
        }, 
        {
            "location": "/widgets/sliders/#dashed", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display a dashed gauge", 
            "title": "dashed"
        }, 
        {
            "location": "/widgets/sliders/#range", 
            "text": "type:  object  default:  { min :0, max :1}  usage:  range  defines the breakpoints of the fader's scale  keys can be percentages and/or  min  /  max  values can be  number  or  object  if a custom label is needed    example: range :   { \n     min : 0 , \n     50% : 1 ,         \n     max :   { inf : 10 }   //  inf  will be used as a custom label on the scale  }", 
            "title": "range"
        }, 
        {
            "location": "/widgets/sliders/#origin", 
            "text": "type:  number  default:  auto  usage:  origin  defines the starting point's value of the fader's gauge", 
            "title": "origin"
        }, 
        {
            "location": "/widgets/sliders/#logscale", 
            "text": "type:  boolean  default:  false  usage: set to  true  use logarithmic scaling between breakpoints (log10)", 
            "title": "logScale"
        }, 
        {
            "location": "/widgets/sliders/#unit", 
            "text": "type:  string  default:  empty  usage:  unit  will be appended to the displayed widget's value (it doesn't affect osc messages)", 
            "title": "unit"
        }, 
        {
            "location": "/widgets/sliders/#snap", 
            "text": "type:  boolean  default:  false  usage: by default, dragging the widget will modify it's value starting from its last value. Setting this to  true  will make it snap directly to the mouse/touch position.", 
            "title": "snap"
        }, 
        {
            "location": "/widgets/sliders/#spring", 
            "text": "type:  boolean  default:  false  usage: when set to  true , the widget will go back to its initial value when released.", 
            "title": "spring"
        }, 
        {
            "location": "/widgets/sliders/#doubletap", 
            "text": "type:  boolean  default:  false  usage: set to  true  to make the fader reset to its initial value when receiving a double tap", 
            "title": "doubleTap"
        }, 
        {
            "location": "/widgets/sliders/#meter", 
            "text": "type:  boolean  default:  false  usage: set to true to display a vu-meter next in the fader  the meter's  id  will be the same as the widget's with  /meter  appended to it  the meter's  address will be the same as the widget's with  /meter  appended to it", 
            "title": "meter"
        }, 
        {
            "location": "/widgets/sliders/#meteraddress", 
            "text": "type:  boolean  default:  empty  usage: overrides the  meter 's osc address", 
            "title": "meterAddress"
        }, 
        {
            "location": "/widgets/sliders/#css", 
            "text": "--color-gauge:color;\n--color-knob:color;\n--color-pips:color;", 
            "title": "css"
        }, 
        {
            "location": "/widgets/sliders/#knob", 
            "text": "{ \n     type : knob , \n     // etc  }", 
            "title": "Knob"
        }, 
        {
            "location": "/widgets/sliders/#pips_1", 
            "text": "type:  boolean  default:  true  usage: set to  false  to hide the scale", 
            "title": "pips"
        }, 
        {
            "location": "/widgets/sliders/#input_1", 
            "text": "type:  boolean  default:  true  usage: set to  false  to hide the built-in input", 
            "title": "input"
        }, 
        {
            "location": "/widgets/sliders/#compact_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display a compact alternative for the widget. Disables default mouse/touch focusing on the value display (right-click/long-touch still triggers it).", 
            "title": "compact"
        }, 
        {
            "location": "/widgets/sliders/#angle", 
            "text": "type:  number  default:  270  usage:  angle  defines the angle's width of the knob, in degrees", 
            "title": "angle"
        }, 
        {
            "location": "/widgets/sliders/#range_1", 
            "text": "type:  object  default:  { min :0, max :1}  usage:  range  defines the breakpoints of the fader's scale  keys can be percentages and/or  min  /  max  values can be  number  or  object  if a custom label is needed    example: range :   { \n     min : 0 , \n     50% : 1 ,         \n     max :   { inf : 10 }   //  inf  will be used as a custom label on the scale  }", 
            "title": "range"
        }, 
        {
            "location": "/widgets/sliders/#origin_1", 
            "text": "type:  number  default:  auto  usage:  origin  defines the starting point's value of the knob's gauge", 
            "title": "origin"
        }, 
        {
            "location": "/widgets/sliders/#logscale_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  use logarithmic scaling between breakpoints", 
            "title": "logScale"
        }, 
        {
            "location": "/widgets/sliders/#unit_1", 
            "text": "type:  string  default:  empty  usage:  unit  will be appended to the displayed widget's value (it doesn't affect osc messages)", 
            "title": "unit"
        }, 
        {
            "location": "/widgets/sliders/#snap_1", 
            "text": "type:  boolean  default:  false  usage: by default, dragging the widget  vertically  will modify it's value starting from its last value. Setting this to  true  will make it snap directly to the mouse/touch position.", 
            "title": "snap"
        }, 
        {
            "location": "/widgets/sliders/#spring_1", 
            "text": "type:  boolean  default:  false  usage: when set to  true , the widget will go back to its initial value when released.", 
            "title": "spring"
        }, 
        {
            "location": "/widgets/sliders/#doubletap_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  to make the knob reset to its initial value when receiving a double tap", 
            "title": "doubleTap"
        }, 
        {
            "location": "/widgets/sliders/#css_1", 
            "text": "--color-gauge:color;\n--color-knob:color;\n--color-pips:color;", 
            "title": "css"
        }, 
        {
            "location": "/widgets/sliders/#encoder", 
            "text": "An endless knob that only responds to rotative gestures.  { \n     type : encoder , \n     // etc  }", 
            "title": "Encoder"
        }, 
        {
            "location": "/widgets/sliders/#ticks", 
            "text": "type:  number  default:  360  usage: defines the granularity / verbosity of the encoder (number of step for a 360\u00b0 arc)", 
            "title": "ticks"
        }, 
        {
            "location": "/widgets/sliders/#back", 
            "text": "type:  string|number|object  default:  -1  usage: defines which value is sent when rotating the encoder anticlockwise  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "back"
        }, 
        {
            "location": "/widgets/sliders/#forth", 
            "text": "type:  string|number|object  default:  1  usage: defines which value is sent when rotating the encoder clockwise  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "forth"
        }, 
        {
            "location": "/widgets/sliders/#release", 
            "text": "type:  string|number|object  default:  empty  usage: defines which value is sent when releasing the encoder  set to  null  to send send no argument in the osc message  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "release"
        }, 
        {
            "location": "/widgets/sliders/#snap_2", 
            "text": "type:  boolean  default:  false  usage: by default, dragging the widget will modify it's value starting from its last value. Setting this to  true  will make it snap directly to the mouse/touch position.", 
            "title": "snap"
        }, 
        {
            "location": "/widgets/sliders/#doubletap_2", 
            "text": "type:  boolean  default:  false  usage: set to  true  to make the encoder reset to its initial value when receiving a double tap", 
            "title": "doubleTap"
        }, 
        {
            "location": "/widgets/sliders/#css_2", 
            "text": "--color-knob:color;", 
            "title": "css"
        }, 
        {
            "location": "/widgets/sliders/#range_2", 
            "text": "A range is a fader with two handles. To move the range (both handles at once), hold the  shift  key or use two fingers.  { \n     type : range , \n     // etc  }", 
            "title": "Range"
        }, 
        {
            "location": "/widgets/sliders/#split", 
            "text": "type:  boolean|object  default:  false  usage:  set to  true  to send separate osc messages for  low  and  high  handles. The  address  will be the same as the widget's with  /low  or  /high  appended to it  can be set as an object to specify a different  address  :  ['/osc_address_low', '/osc_address_high']    note: the widget will only respond to its original osc address, not to the splitted version", 
            "title": "split"
        }, 
        {
            "location": "/widgets/pads/", 
            "text": "Pads\n\n\nPads are multidimensional widgets that output multiple values.\n\n\nXY\n\n\n{\n\n    \ntype\n:\nxy\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\ninput\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: set to \nfalse\n to hide the built-in input\n\n\n\n\nrangeX\n\n\n\n\ntype: \nobject\n\n\ndefault:\n    \n{\nmin\n:0,\nmax\n:1}\n\n\nusage: defines the \nmin\n and \nmax\n values for the \nx\n axis. Same as fader's \nrange\n\n\n\n\nrangeY\n\n\n\n\ntype: \nobject\n\n\ndefault:\n    \n{\nmin\n:0,\nmax\n:1}\n\n\nusage: defines the \nmin\n and \nmax\n values for the \ny\n axis. Same as fader's \nrange\n\n\n\n\nlogScaleX\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \nx\n axis (log10)\n\n\n\n\nlogScaleY\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \ny\n axis (log10)\n\n\n\n\nsnap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: by default, dragging the widget will modify it's value starting from its last value. Setting this to \ntrue\n will make it snap directly to the mouse/touch position.\n\n\n\n\nspring\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: when set to \ntrue\n, the widget will go back to its initial value when released.\n\n\n\n\ndoubleTap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to make the xy reset to its initial value when receiving a double tap\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean|object\n\n\ndefault: \nfalse\n\n\nusage:\n\n\nset to \ntrue\n to send separate osc messages for \nx\n and \ny\n axis. The \naddress\n will be the same as the widget's with \n/x\n or \n/y\n appended to it\n\n\ncan be set as an object to specify a different \naddress\n : \n['/osc_address_x', '/osc_address_y']\n\n\n\n\n\n\nnote: the widget will only respond to its original osc address, not to the splitted version\n\n\n\n\nMultiXy\n\n\n{\n\n    \ntype\n:\nmultixy\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\npoints\n\n\n\n\ntype: \ninteger|array\n\n\ndefault: \n2\n\n\nusage: defines the number of points on the pad. Can be an \narray\n of \nstrings\n that will be used as labels for the points (ex: \n['A', 'B']\n)\n\n\n\n\npointSize\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n15\n\n\nusage: defines the points's size\n\n\n\n\nrangeX\n\n\n\n\ntype: \nobject\n\n\ndefault:\n    \n{\nmin\n:0,\nmax\n:1}\n\n\nusage: defines the \nmin\n and \nmax\n values for the \nx\n axis. Same as fader's \nrange\n\n\n\n\nrangeY\n\n\n\n\ntype: \nobject\n\n\ndefault:\n    \n{\nmin\n:0,\nmax\n:1}\n\n\nusage: defines the \nmin\n and \nmax\n values for the \ny\n axis. Same as fader's \nrange\n\n\n\n\nlogScaleX\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \nx\n axis (log10)\n\n\n\n\nlogScaleY\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \ny\n axis (log10)\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean|object\n\n\ndefault: \nfalse\n\n\nusage:\n\n\nset to \ntrue\n to send separate osc messages for each point's \nx\n and \ny\n axis. The \naddress\n will be the same as the widget's with \n/N/x\n or \n/N/y\n appended to it, where \nN\n is the point's id (or the point's label if \npoints\n is an \narray\n).\n\n\ncan be set as an object to specify a different \naddress\n : \n['/0/x', '/0/y', '/1/x', '/2/y']\n\n\n\n\n\n\nnote: the widget will only respond to its original osc address, not to the splitted version\n\n\n\n\nsnap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: by default, the points are dragged from their initial position; if set to \ntrue\n, touching anywhere on the widget's surface will make them snap to the touching coordinates (one per touch).\n\n\n\n\nRGB\n\n\nRGB is a variant of XY, it outputs rgb values between 0 and 255.\n\n\n{\n\n    \ntype\n:\nrgb\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\ninput\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: set to \nfalse\n to hide the built-in input\n\n\n\n\nprecision\n\n\n\n\ndefault:\n0\n\n\n\n\nsnap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: by default, dragging the widget will modify it's value starting from its last value. Setting this to true will make it snap directly to the mouse/touch position.\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean|object\n\n\ndefault: \nfalse\n\n\nusage:\n\n\nset to \ntrue\n to send separate osc messages for \nr\n and \ng\n \n \nb\n. The \naddress\n will be the same as the widget's with \n/r\n, \n/g\n or \n/b\n appended to it\n\n\ncan be set as an object to specify a different \naddress\n : \n['/r', '/b', '/b']", 
            "title": "Pads"
        }, 
        {
            "location": "/widgets/pads/#pads", 
            "text": "Pads are multidimensional widgets that output multiple values.", 
            "title": "Pads"
        }, 
        {
            "location": "/widgets/pads/#xy", 
            "text": "{ \n     type : xy , \n     // etc  }", 
            "title": "XY"
        }, 
        {
            "location": "/widgets/pads/#input", 
            "text": "type:  boolean  default:  true  usage: set to  false  to hide the built-in input", 
            "title": "input"
        }, 
        {
            "location": "/widgets/pads/#rangex", 
            "text": "type:  object  default:\n     { min :0, max :1}  usage: defines the  min  and  max  values for the  x  axis. Same as fader's  range", 
            "title": "rangeX"
        }, 
        {
            "location": "/widgets/pads/#rangey", 
            "text": "type:  object  default:\n     { min :0, max :1}  usage: defines the  min  and  max  values for the  y  axis. Same as fader's  range", 
            "title": "rangeY"
        }, 
        {
            "location": "/widgets/pads/#logscalex", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  x  axis (log10)", 
            "title": "logScaleX"
        }, 
        {
            "location": "/widgets/pads/#logscaley", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  y  axis (log10)", 
            "title": "logScaleY"
        }, 
        {
            "location": "/widgets/pads/#snap", 
            "text": "type:  boolean  default:  false  usage: by default, dragging the widget will modify it's value starting from its last value. Setting this to  true  will make it snap directly to the mouse/touch position.", 
            "title": "snap"
        }, 
        {
            "location": "/widgets/pads/#spring", 
            "text": "type:  boolean  default:  false  usage: when set to  true , the widget will go back to its initial value when released.", 
            "title": "spring"
        }, 
        {
            "location": "/widgets/pads/#doubletap", 
            "text": "type:  boolean  default:  false  usage: set to  true  to make the xy reset to its initial value when receiving a double tap", 
            "title": "doubleTap"
        }, 
        {
            "location": "/widgets/pads/#split", 
            "text": "type:  boolean|object  default:  false  usage:  set to  true  to send separate osc messages for  x  and  y  axis. The  address  will be the same as the widget's with  /x  or  /y  appended to it  can be set as an object to specify a different  address  :  ['/osc_address_x', '/osc_address_y']    note: the widget will only respond to its original osc address, not to the splitted version", 
            "title": "split"
        }, 
        {
            "location": "/widgets/pads/#multixy", 
            "text": "{ \n     type : multixy , \n     // etc  }", 
            "title": "MultiXy"
        }, 
        {
            "location": "/widgets/pads/#points", 
            "text": "type:  integer|array  default:  2  usage: defines the number of points on the pad. Can be an  array  of  strings  that will be used as labels for the points (ex:  ['A', 'B'] )", 
            "title": "points"
        }, 
        {
            "location": "/widgets/pads/#pointsize", 
            "text": "type:  integer  default:  15  usage: defines the points's size", 
            "title": "pointSize"
        }, 
        {
            "location": "/widgets/pads/#rangex_1", 
            "text": "type:  object  default:\n     { min :0, max :1}  usage: defines the  min  and  max  values for the  x  axis. Same as fader's  range", 
            "title": "rangeX"
        }, 
        {
            "location": "/widgets/pads/#rangey_1", 
            "text": "type:  object  default:\n     { min :0, max :1}  usage: defines the  min  and  max  values for the  y  axis. Same as fader's  range", 
            "title": "rangeY"
        }, 
        {
            "location": "/widgets/pads/#logscalex_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  x  axis (log10)", 
            "title": "logScaleX"
        }, 
        {
            "location": "/widgets/pads/#logscaley_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  y  axis (log10)", 
            "title": "logScaleY"
        }, 
        {
            "location": "/widgets/pads/#split_1", 
            "text": "type:  boolean|object  default:  false  usage:  set to  true  to send separate osc messages for each point's  x  and  y  axis. The  address  will be the same as the widget's with  /N/x  or  /N/y  appended to it, where  N  is the point's id (or the point's label if  points  is an  array ).  can be set as an object to specify a different  address  :  ['/0/x', '/0/y', '/1/x', '/2/y']    note: the widget will only respond to its original osc address, not to the splitted version", 
            "title": "split"
        }, 
        {
            "location": "/widgets/pads/#snap_1", 
            "text": "type:  boolean  default:  false  usage: by default, the points are dragged from their initial position; if set to  true , touching anywhere on the widget's surface will make them snap to the touching coordinates (one per touch).", 
            "title": "snap"
        }, 
        {
            "location": "/widgets/pads/#rgb", 
            "text": "RGB is a variant of XY, it outputs rgb values between 0 and 255.  { \n     type : rgb , \n     // etc  }", 
            "title": "RGB"
        }, 
        {
            "location": "/widgets/pads/#input_1", 
            "text": "type:  boolean  default:  true  usage: set to  false  to hide the built-in input", 
            "title": "input"
        }, 
        {
            "location": "/widgets/pads/#precision", 
            "text": "default: 0", 
            "title": "precision"
        }, 
        {
            "location": "/widgets/pads/#snap_2", 
            "text": "type:  boolean  default:  false  usage: by default, dragging the widget will modify it's value starting from its last value. Setting this to true will make it snap directly to the mouse/touch position.", 
            "title": "snap"
        }, 
        {
            "location": "/widgets/pads/#split_2", 
            "text": "type:  boolean|object  default:  false  usage:  set to  true  to send separate osc messages for  r  and  g     b . The  address  will be the same as the widget's with  /r ,  /g  or  /b  appended to it  can be set as an object to specify a different  address  :  ['/r', '/b', '/b']", 
            "title": "split"
        }, 
        {
            "location": "/widgets/buttons/", 
            "text": "Buttons\n\n\nButtons are exactly what you think they are.\n\n\nToggle\n\n\n{\n\n    \ntype\n:\ntoggle\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\ndoubleTap\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to make the button require a double tap to be toggled instead of a single tap\n\n\n\n\nled\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display the toggle's state with a led\n\n\n\n\non\nflash_on\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \n1\n\n\nusage: defines which value is sent on \non\n position\n\n\nset to \nnull\n to send send no argument in the osc message\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\noff\nflash_on\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \n0\n\n\nusage: defines which value is sent on \noff\n position\n\n\nset to \nnull\n to send send no argument in the osc message\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\nPush\n\n\n{\n\n    \ntype\n:\npush\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\non\nflash_on\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \n1\n\n\nusage: defines which value is sent when pushing the button\n\n\nset to \nnull\n to send send no argument in the osc message\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\noff\nflash_on\n\n\n\n\ntype: \nstring|number|object\n\n\ndefault: \n0\n\n\nusage: defines which value is sent when releasing the button\n\n\nset to \nnull\n to send send no argument in the osc message\n\n\ncan be an \nobject\n if the type needs to be specified (see \npreArgs\n)\n\n\n\n\n\n\n\n\nnorelease\n\n\n\n\ntype: \nbool\n\n\ndefault: \nfalse\n\n\nusage: set to true to prevent sending any osc message when releasing the button\n\n\n\n\nSetting the \npush\n's value externally (via osc) will toggle it's inner light.\n\n\nSwitch\n\n\n{\n\n    \ntype\n:\nswitch\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nvalues\n\n\n\n\ntype: \narray|object\n\n\ndefault: \n{\nValue 1\n:1,\nValue 2\n:2}\n\n\nusage:\n\n\narray\n of possible values to switch between : \n[1,2,3]\n\n\nobject\n of \nlabel\n:value\n pairs\n\n\n\n\n\n\n\n\nshowValues\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: if \nvalues\n is an \nobject\n, set to \ntrue\n to display both values and labels instead of labels only\n\n\n\n\nDropdown\n\n\n{\n\n    \ntype\n:\ndropdown\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nvalues\nflash_on\n\n\n\n\ntype: \narray|object\n\n\ndefault: \n{\nValue 1\n:1,\nValue 2\n:2}\n\n\nusage:\n\n\narray\n of possible values to switch between : \n[1,2,3]\n\n\nobject\n of \nlabel\n:value\n pairs\n\n\nan empty option will always be prepended to \nvalues\n (sends an osc message without any value)", 
            "title": "Buttons"
        }, 
        {
            "location": "/widgets/buttons/#buttons", 
            "text": "Buttons are exactly what you think they are.", 
            "title": "Buttons"
        }, 
        {
            "location": "/widgets/buttons/#toggle", 
            "text": "{ \n     type : toggle , \n     // etc  }", 
            "title": "Toggle"
        }, 
        {
            "location": "/widgets/buttons/#doubletap", 
            "text": "type:  boolean  default:  false  usage: set to  true  to make the button require a double tap to be toggled instead of a single tap", 
            "title": "doubleTap"
        }, 
        {
            "location": "/widgets/buttons/#led", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display the toggle's state with a led", 
            "title": "led"
        }, 
        {
            "location": "/widgets/buttons/#onflash_on", 
            "text": "type:  string|number|object  default:  1  usage: defines which value is sent on  on  position  set to  null  to send send no argument in the osc message  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "onflash_on"
        }, 
        {
            "location": "/widgets/buttons/#offflash_on", 
            "text": "type:  string|number|object  default:  0  usage: defines which value is sent on  off  position  set to  null  to send send no argument in the osc message  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "offflash_on"
        }, 
        {
            "location": "/widgets/buttons/#push", 
            "text": "{ \n     type : push , \n     // etc  }", 
            "title": "Push"
        }, 
        {
            "location": "/widgets/buttons/#onflash_on_1", 
            "text": "type:  string|number|object  default:  1  usage: defines which value is sent when pushing the button  set to  null  to send send no argument in the osc message  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "onflash_on"
        }, 
        {
            "location": "/widgets/buttons/#offflash_on_1", 
            "text": "type:  string|number|object  default:  0  usage: defines which value is sent when releasing the button  set to  null  to send send no argument in the osc message  can be an  object  if the type needs to be specified (see  preArgs )", 
            "title": "offflash_on"
        }, 
        {
            "location": "/widgets/buttons/#norelease", 
            "text": "type:  bool  default:  false  usage: set to true to prevent sending any osc message when releasing the button   Setting the  push 's value externally (via osc) will toggle it's inner light.", 
            "title": "norelease"
        }, 
        {
            "location": "/widgets/buttons/#switch", 
            "text": "{ \n     type : switch , \n     // etc  }", 
            "title": "Switch"
        }, 
        {
            "location": "/widgets/buttons/#values", 
            "text": "type:  array|object  default:  { Value 1 :1, Value 2 :2}  usage:  array  of possible values to switch between :  [1,2,3]  object  of  label :value  pairs", 
            "title": "values"
        }, 
        {
            "location": "/widgets/buttons/#showvalues", 
            "text": "type:  boolean  default:  false  usage: if  values  is an  object , set to  true  to display both values and labels instead of labels only", 
            "title": "showValues"
        }, 
        {
            "location": "/widgets/buttons/#dropdown", 
            "text": "{ \n     type : dropdown , \n     // etc  }", 
            "title": "Dropdown"
        }, 
        {
            "location": "/widgets/buttons/#valuesflash_on", 
            "text": "type:  array|object  default:  { Value 1 :1, Value 2 :2}  usage:  array  of possible values to switch between :  [1,2,3]  object  of  label :value  pairs  an empty option will always be prepended to  values  (sends an osc message without any value)", 
            "title": "valuesflash_on"
        }, 
        {
            "location": "/widgets/switchers/", 
            "text": "Switchers\n\n\nSwitcher can store and recall the state of other widgets.\n\n\nSwitcher\n\n\nThe switcher looks like the \nswitch\n. Each of its possible values represent a bank that stores the values from the widgets listed in its \nlinkedWidgets\n attribute.  \n\n\n{\n\n    \ntype\n:\nswitcher\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nlinkedWidgets\n\n\n\n\ntype: \narray|string\n\n\ndefault:\n    \nempty\n\n\nusage:\n\n\nas a \nstring\n: a widget's \nid\n whose state changes will be stored\n\n\nas an \narray\n: a list of widget \nid\n \nstrings\n\n\n\n\n\n\n\n\nvalues\n\n\n\n\ntype: \narray|object\n\n\ndefault: \n[\nA\n, \nB\n]\n\n\nusage:\n\n\narray\n of possible values to switch between : \n[1,2,3]\n\n\nobject\n of \nlabel\n:value\n pairs\n\n\n\n\n\n\n\n\nCrossfader\n\n\nThe crossfader is a 2-states-only switcher that comes with a slider allowing to fade from one state to the other by interpolating the values.", 
            "title": "Switchers"
        }, 
        {
            "location": "/widgets/switchers/#switchers", 
            "text": "Switcher can store and recall the state of other widgets.", 
            "title": "Switchers"
        }, 
        {
            "location": "/widgets/switchers/#switcher", 
            "text": "The switcher looks like the  switch . Each of its possible values represent a bank that stores the values from the widgets listed in its  linkedWidgets  attribute.    { \n     type : switcher , \n     // etc  }", 
            "title": "Switcher"
        }, 
        {
            "location": "/widgets/switchers/#linkedwidgets", 
            "text": "type:  array|string  default:\n     empty  usage:  as a  string : a widget's  id  whose state changes will be stored  as an  array : a list of widget  id   strings", 
            "title": "linkedWidgets"
        }, 
        {
            "location": "/widgets/switchers/#values", 
            "text": "type:  array|object  default:  [ A ,  B ]  usage:  array  of possible values to switch between :  [1,2,3]  object  of  label :value  pairs", 
            "title": "values"
        }, 
        {
            "location": "/widgets/switchers/#crossfader", 
            "text": "The crossfader is a 2-states-only switcher that comes with a slider allowing to fade from one state to the other by interpolating the values.", 
            "title": "Crossfader"
        }, 
        {
            "location": "/widgets/plots/", 
            "text": "Plots\n\n\nPlots are tools that display other widgets' state or incomming osc messages. They are not sensitive to mouse and touch interactions.\n\n\nLed\n\n\n{\n\n    \ntype\n:\nled\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nrange\n\n\n\n\ntype: \nobject\n\n\ndefault: \n{\nmin\n:0,\nmax\n:1}\n\n\nusage: defines the \nmin\n and \nmax\n value the led's intensity will be mapped to\n\n\n\n\nlogScale\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to true to use logarithmic scaling\n\n\n\n\nRgbLed\n\n\n{\n\n    \ntype\n:\nrgbled\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nThis one is like the \nled\n except it takes either three arguments (red, green and blue values between 0 and 255) with an optionnal forth argument (alpha, between 0 and 1), or one argument (a valid css color name).\n\n\nPlot\n\n\nThe plot receives an array of coordinates and draws them on a chart. Coordinates can be :\n- \ny\n values evenly spaced on the \nx\n axis\n- \n[x, y]\n coordinates arrays\n\n\n\n\nInfo\n\n\nCoordinates also can be sent as a stringified array (\n[]\n). A stringified object can also be sent to change specific points' coordinates (e.g. \n{0:1, 4:0}\n will change the 1\nst\n and 5\nth\n points' coordinates) .\n\n\n\n\n{\n\n    \ntype\n:\nplot\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nvalue\n\n\n\n\ntype: \narray|string\n\n\ndefault: \n['']\n\n\nusage:\n\n\nas an \narray\n: where items can be\n\n\nnumber\n\n\nstring\n (widget's \nid\n)\n\n\n[x, y]\n: array of \nnumber\n or \nstring\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n\n\n\n\ntype: \nobject\n\n\ndefault:\n    \n{\n        x:{\nmin\n:0,\nmax\n:1},\n        y:{\nmin\n:0,\nmax\n:1}\n    }\n\n\nusage: defines the \nmin\n and \nmax\n values for the \nx\n and \ny\n axis\n\n\n\n\nbars\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use draw bars instead (disables \nlogScaleX\n and forces \nx-axis\n even spacing)\n\n\n\n\nlogScaleX\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \nx\n axis (log10)\n\n\n\n\nlogScaleY\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \ny\n axis (log10)\n\n\n\n\nsmooth\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to make the line smooth. Float values are also acceptable (works fine between 0 and 0.5)\n\n\n\n\norigin\n\n\n\n\ntype: \nnumber\n\n\ndefault: \nauto\n\n\nusage: defines the y-axis origin. Set to \nfalse\n to disable it.\n\n\n\n\nEq\n\n\nThe Eq receives an array of filter objects and draws their frequency response between 20Hz and 22050Hz.\n\n\n{\n\n    \ntype\n:\neq\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nvalue\n\n\n\n\ntype: \narray\n\n\ndefault: \n[]\n\n\nusage:\n\n\neach item must be an object of the form below\n\n\nall filters parameters can be filled with widget ids, whose value will be used\n\n\n\n\n\n\n\n\n{\n    type:[string],   // \nhighpass\n, \nhighshelf\n, \nlowpass\n, \nlowshelf\n, \npeak\n, \nnotch\n\n    freq:[number],   //\n    q:[number],      //\n    gain:[number],   //\n    on:[bool]        // 1 or true = active, 0 or false = bypassed\n}\n\n\n\n\nresolution\n\n\n\n\ntype: \nnumber\n\n\ndefault: \n128\n\n\nusage: defines the number of points used to compute the frequency response\n\n\n\n\nrangeY\n\n\n\n\ntype: \nobject\n\n\ndefault:\n    \n{\nmin\n:-20,\nmax\n:20}\n\n\nusage: defines the \nmin\n and \nmax\n values for the \ny\n axis (dB level)\n\n\n\n\nlogScaleX\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to use logarithmic scale for the \nx\n axis (log10)\n\n\n\n\nsmooth\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to true to make the line smooth. Float values are also acceptable (works fine between 0 and 0.5)\n\n\n\n\norigin\n\n\n\n\ntype: \nnumber\n\n\ndefault: \nauto\n\n\nusage: defines the y-axis origin. Set to \nfalse\n to disable it.\n\n\n\n\nVisualizer\n\n\nThe visualizer displays the evolution in time of a received value (through osc) \nor\n another widget's value.\n\n\n{\n\n    \ntype\n:\nvisualizer\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nduration\n\n\n\n\ntype: \nnumber\n\n\ndefault: \n1\n\n\nusage: window size in seconds\n\n\n\n\nrange\n\n\n\n\ntype: \nobject\n\n\ndefault: \n{\nmin\n:0,\nmax\n:1}\n\n\nusage: defines the \nmin\n and \nmax\n values for the \ny\n axis\n\n\n\n\nlogScale\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n use logarithmic scaling (log10)\n\n\n\n\nsmooth\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to true to make the line smooth. Float values are also acceptable (works fine between 0 and 0.5)\n\n\n\n\norigin\n\n\n\n\ntype: \nnumber\n\n\ndefault: \nauto\n\n\nusage: defines the y-axis origin. Set to \nfalse\n to disable it.\n\n\n\n\nText\n\n\nText displays incoming values (via osc) as text. Sending a message with no argument to the widget will reset it to its default text.\n\n\n{\n\n    \ntype\n:\ntext\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nvertical\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n display vertically\n\n\n\n\nMeter\n\n\nMeter displays incoming numerical values (via osc) as a gauge level\n\n\n{\n\n    \ntype\n:\nmeter\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nhorizontal\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display the meter horizontally\n\n\n\n\nrange\n\n\n\n\nsee fader's \nrange\n\n\n\n\nlogScale\n\n\n\n\nsee fader's \nlogScale\n\n\n\n\nImage\n\n\nImage displays an image from a file path/url or from a base64 encoded image string. Sending an empty message resets the widget to its initial \nvalue\n.\n\n\n{\n\n    \ntype\n:\nimage\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nsize\n\n\n\n\ntype: \nstring\n\n\ndefault: \ncover\n\n\nusage: css \nbackground-size\n\n\n\n\nposition\n\n\n\n\ntype: \nstring\n\n\ndefault: \ncover\n\n\nusage: css \nbackground-position\n\n\n\n\nrepeat\n\n\n\n\ntype: \nstring\n\n\ndefault: \nno-repeat\n\n\nusage: css \nbackground-repeat\n\n\n\n\nborder\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to disable the image's borders and background-color.\n\n\n\n\ncache\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: set to \nfalse\n to disable image caching (forces file reload when updating or editing the widget). When \ntrue\n, sending \n'reload'\n to the widget reloads its image without changing its value.\n\n\n\n\nvalue\n\n\n\n\ntype: \nstring\n\n\ndefault: \n''\n\n\nusage : initial image\n\n\nfile url or absolute path\n\n\nbase64 encoded image\n : \ndata:image/...\n\n\n\n\nSvg\n\n\n{\n\n    \ntype\n:\nsvg\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nsvg\n\n\n\n\ntype: \nstring\n\n\ndefault: \n''\n\n\nusage : svg xml definition\n\n\nwill be wrapped in a \nsvg\n/svg\n element\n\n\npath\n commands support a special percent notation (\n%x\n and \n%y\n)", 
            "title": "Plots"
        }, 
        {
            "location": "/widgets/plots/#plots", 
            "text": "Plots are tools that display other widgets' state or incomming osc messages. They are not sensitive to mouse and touch interactions.", 
            "title": "Plots"
        }, 
        {
            "location": "/widgets/plots/#led", 
            "text": "{ \n     type : led , \n     // etc  }", 
            "title": "Led"
        }, 
        {
            "location": "/widgets/plots/#range", 
            "text": "type:  object  default:  { min :0, max :1}  usage: defines the  min  and  max  value the led's intensity will be mapped to", 
            "title": "range"
        }, 
        {
            "location": "/widgets/plots/#logscale", 
            "text": "type:  boolean  default:  false  usage: set to true to use logarithmic scaling", 
            "title": "logScale"
        }, 
        {
            "location": "/widgets/plots/#rgbled", 
            "text": "{ \n     type : rgbled , \n     // etc  }   This one is like the  led  except it takes either three arguments (red, green and blue values between 0 and 255) with an optionnal forth argument (alpha, between 0 and 1), or one argument (a valid css color name).", 
            "title": "RgbLed"
        }, 
        {
            "location": "/widgets/plots/#plot", 
            "text": "The plot receives an array of coordinates and draws them on a chart. Coordinates can be :\n-  y  values evenly spaced on the  x  axis\n-  [x, y]  coordinates arrays   Info  Coordinates also can be sent as a stringified array ( [] ). A stringified object can also be sent to change specific points' coordinates (e.g.  {0:1, 4:0}  will change the 1 st  and 5 th  points' coordinates) .   { \n     type : plot , \n     // etc  }", 
            "title": "Plot"
        }, 
        {
            "location": "/widgets/plots/#value", 
            "text": "type:  array|string  default:  ['']  usage:  as an  array : where items can be  number  string  (widget's  id )  [x, y] : array of  number  or  string", 
            "title": "value"
        }, 
        {
            "location": "/widgets/plots/#range_1", 
            "text": "type:  object  default:\n     {\n        x:{ min :0, max :1},\n        y:{ min :0, max :1}\n    }  usage: defines the  min  and  max  values for the  x  and  y  axis", 
            "title": "range"
        }, 
        {
            "location": "/widgets/plots/#bars", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use draw bars instead (disables  logScaleX  and forces  x-axis  even spacing)", 
            "title": "bars"
        }, 
        {
            "location": "/widgets/plots/#logscalex", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  x  axis (log10)", 
            "title": "logScaleX"
        }, 
        {
            "location": "/widgets/plots/#logscaley", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  y  axis (log10)", 
            "title": "logScaleY"
        }, 
        {
            "location": "/widgets/plots/#smooth", 
            "text": "type:  boolean  default:  false  usage: set to  true  to make the line smooth. Float values are also acceptable (works fine between 0 and 0.5)", 
            "title": "smooth"
        }, 
        {
            "location": "/widgets/plots/#origin", 
            "text": "type:  number  default:  auto  usage: defines the y-axis origin. Set to  false  to disable it.", 
            "title": "origin"
        }, 
        {
            "location": "/widgets/plots/#eq", 
            "text": "The Eq receives an array of filter objects and draws their frequency response between 20Hz and 22050Hz.  { \n     type : eq , \n     // etc  }", 
            "title": "Eq"
        }, 
        {
            "location": "/widgets/plots/#value_1", 
            "text": "type:  array  default:  []  usage:  each item must be an object of the form below  all filters parameters can be filled with widget ids, whose value will be used     {\n    type:[string],   //  highpass ,  highshelf ,  lowpass ,  lowshelf ,  peak ,  notch \n    freq:[number],   //\n    q:[number],      //\n    gain:[number],   //\n    on:[bool]        // 1 or true = active, 0 or false = bypassed\n}", 
            "title": "value"
        }, 
        {
            "location": "/widgets/plots/#resolution", 
            "text": "type:  number  default:  128  usage: defines the number of points used to compute the frequency response", 
            "title": "resolution"
        }, 
        {
            "location": "/widgets/plots/#rangey", 
            "text": "type:  object  default:\n     { min :-20, max :20}  usage: defines the  min  and  max  values for the  y  axis (dB level)", 
            "title": "rangeY"
        }, 
        {
            "location": "/widgets/plots/#logscalex_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  to use logarithmic scale for the  x  axis (log10)", 
            "title": "logScaleX"
        }, 
        {
            "location": "/widgets/plots/#smooth_1", 
            "text": "type:  boolean  default:  false  usage: set to true to make the line smooth. Float values are also acceptable (works fine between 0 and 0.5)", 
            "title": "smooth"
        }, 
        {
            "location": "/widgets/plots/#origin_1", 
            "text": "type:  number  default:  auto  usage: defines the y-axis origin. Set to  false  to disable it.", 
            "title": "origin"
        }, 
        {
            "location": "/widgets/plots/#visualizer", 
            "text": "The visualizer displays the evolution in time of a received value (through osc)  or  another widget's value.  { \n     type : visualizer , \n     // etc  }", 
            "title": "Visualizer"
        }, 
        {
            "location": "/widgets/plots/#duration", 
            "text": "type:  number  default:  1  usage: window size in seconds", 
            "title": "duration"
        }, 
        {
            "location": "/widgets/plots/#range_2", 
            "text": "type:  object  default:  { min :0, max :1}  usage: defines the  min  and  max  values for the  y  axis", 
            "title": "range"
        }, 
        {
            "location": "/widgets/plots/#logscale_1", 
            "text": "type:  boolean  default:  false  usage: set to  true  use logarithmic scaling (log10)", 
            "title": "logScale"
        }, 
        {
            "location": "/widgets/plots/#smooth_2", 
            "text": "type:  boolean  default:  false  usage: set to true to make the line smooth. Float values are also acceptable (works fine between 0 and 0.5)", 
            "title": "smooth"
        }, 
        {
            "location": "/widgets/plots/#origin_2", 
            "text": "type:  number  default:  auto  usage: defines the y-axis origin. Set to  false  to disable it.", 
            "title": "origin"
        }, 
        {
            "location": "/widgets/plots/#text", 
            "text": "Text displays incoming values (via osc) as text. Sending a message with no argument to the widget will reset it to its default text.  { \n     type : text , \n     // etc  }", 
            "title": "Text"
        }, 
        {
            "location": "/widgets/plots/#vertical", 
            "text": "type:  boolean  default:  false  usage: set to  true  display vertically", 
            "title": "vertical"
        }, 
        {
            "location": "/widgets/plots/#meter", 
            "text": "Meter displays incoming numerical values (via osc) as a gauge level  { \n     type : meter , \n     // etc  }", 
            "title": "Meter"
        }, 
        {
            "location": "/widgets/plots/#horizontal", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display the meter horizontally", 
            "title": "horizontal"
        }, 
        {
            "location": "/widgets/plots/#range_3", 
            "text": "see fader's  range", 
            "title": "range"
        }, 
        {
            "location": "/widgets/plots/#logscale_2", 
            "text": "see fader's  logScale", 
            "title": "logScale"
        }, 
        {
            "location": "/widgets/plots/#image", 
            "text": "Image displays an image from a file path/url or from a base64 encoded image string. Sending an empty message resets the widget to its initial  value .  { \n     type : image , \n     // etc  }", 
            "title": "Image"
        }, 
        {
            "location": "/widgets/plots/#size", 
            "text": "type:  string  default:  cover  usage: css  background-size", 
            "title": "size"
        }, 
        {
            "location": "/widgets/plots/#position", 
            "text": "type:  string  default:  cover  usage: css  background-position", 
            "title": "position"
        }, 
        {
            "location": "/widgets/plots/#repeat", 
            "text": "type:  string  default:  no-repeat  usage: css  background-repeat", 
            "title": "repeat"
        }, 
        {
            "location": "/widgets/plots/#border", 
            "text": "type:  boolean  default:  false  usage: set to  true  to disable the image's borders and background-color.", 
            "title": "border"
        }, 
        {
            "location": "/widgets/plots/#cache", 
            "text": "type:  boolean  default:  true  usage: set to  false  to disable image caching (forces file reload when updating or editing the widget). When  true , sending  'reload'  to the widget reloads its image without changing its value.", 
            "title": "cache"
        }, 
        {
            "location": "/widgets/plots/#value_2", 
            "text": "type:  string  default:  ''  usage : initial image  file url or absolute path  base64 encoded image  :  data:image/...", 
            "title": "value"
        }, 
        {
            "location": "/widgets/plots/#svg", 
            "text": "{ \n     type : svg , \n     // etc  }", 
            "title": "Svg"
        }, 
        {
            "location": "/widgets/plots/#svg_1", 
            "text": "type:  string  default:  ''  usage : svg xml definition  will be wrapped in a  svg /svg  element  path  commands support a special percent notation ( %x  and  %y )", 
            "title": "svg"
        }, 
        {
            "location": "/widgets/matrices/", 
            "text": "Matrices\n\n\nMatrices are special containers that only contain one type of widget. All contained widgets will be traversed by single dragging gestures.\n\n\nMultifader\n\n\nMultifader creates a row of vertical faders that respond to the same gestures.\n\n\n{\n\n    \ntype\n:\nmultifader\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nstrips\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n2\n\n\nusage: number of faders in the row, each fader will inherit its parent's properties and the following ones (where \ni\n is the fader's index in the row)\n\n\nid\n: same as the widget's with \n/i\n appended to it\n\n\nlabel\n: \ni\n\n\naddress\n: same as the widget's with \n/i\n appended to it\n\n\n\n\n\n\n\n\nstart\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n0\n\n\nusage: first faders's index\n\n\n\n\ntraversing\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: enable traversing gestures\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: if \ntrue\n, the fader's index will be appended to the widget's osc \naddress\n; if \nfalse\n it will be prepended to the widget's \npreArgs\n\n\n\n\ncolor\n\n\n\n\ntype: \nstring|array\n\n\ndefault: \nauto\n, inherited accent color\n\n\nusage: can be an \narray\n of css color \nstrings\n, which will be sequentially passed to the faders\n\n\n\n\noptions\n\n\n\n\nsee fader's \noptions\n\n\n\n\nMultitoggle\n\n\n{\n\n    \ntype\n:\nmultitoggle\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nmatrix\n\n\n\n\ntype: \narray\n\n\ndefault: \n[2,2]\n\n\nusage: defines the number of columns and and rows. Each cell will contain a toggle button that will inherit its parent's properties and the following ones (where \ni\n is the fader's index in the row)\n\n\nid\n: same as the widget's with \n/i\n appended to it\n\n\nlabel\n: \ni\n\n\naddress\n: same as the widget's with \n/i\n appended to it\n\n\n\n\n\n\n\n\nstart\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n0\n\n\nusage: first toggle's index\n\n\n\n\nspacing\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n0\n\n\nusage: adds space between widgets\n\n\n\n\ntraversing\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: enable traversing gestures\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: if \ntrue\n, the toggle's index will be appended to the widget's osc \naddress\n; if \nfalse\n it will be prepended to the widget's \npreArgs\n\n\n\n\ncolor\n\n\n\n\ntype: \nstring|array\n\n\ndefault: \nauto\n, inherited accent color\n\n\nusage: can be an \narray\n of css color \nstrings\n, which will be sequentially passed to the toggles\n\n\n\n\noptions\n\n\n\n\nsee toggle's \noptions\n\n\n\n\nMultipush\n\n\n{\n\n    \ntype\n:\nmultipush\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nmatrix\n\n\n\n\ntype: \narray\n\n\ndefault: \n[2,2]\n\n\nusage: defines the number of columns and and rows. Each cell will contain a push button that will inherit its parent's properties and the following ones (where \ni\n is the fader's index in the row)\n\n\nid\n: same as the widget's with \n/i\n appended to it\n\n\nlabel\n: \ni\n\n\naddress\n: same as the widget's with \n/i\n appended to it\n\n\n\n\n\n\n\n\nstart\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n0\n\n\nusage: first push's index\n\n\n\n\nspacing\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n0\n\n\nusage: adds space between widgets\n\n\n\n\ntraversing\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: enable traversing gestures\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: if \ntrue\n, the push's index will be appended to the widget's osc \naddress\n; if \nfalse\n it will be prepended to the widget's \npreArgs\n\n\n\n\ncolor\n\n\n\n\ntype: \nstring|array\n\n\ndefault: \nauto\n, inherited accent color\n\n\nusage: can be an \narray\n of css color \nstrings\n, which will be sequentially passed to the pushes\n\n\n\n\noptions\n\n\n\n\nsee push's \noptions\n\n\n\n\nKeyboard\n\n\nThis one works pretty much like the multipush, excepts it looks like a piano keyboard ad\n\n\n{\n\n    \ntype\n:\nkeyboard\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nkeys\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n24\n\n\nusage: defines the number keys\n\n\n\n\nstart\n\n\n\n\ntype: \ninteger\n\n\ndefault: \n60\n\n\nusage: MIDI note number to start with (default is C4)\n\n\n\n\ntraversing\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: enable traversing gestures\n\n\n\n\nsplit\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: if \ntrue\n, the note's midi code will be appended to the widget's osc \naddress\n; if \nfalse\n it will be prepended to the widget's \npreArgs\n\n\n\n\noptions\n\n\n\n\nsee push's \noptions\n\n\n\n\ncss\n\n\n--color-white:color; /* white keys color */\n--color-black:color; /* black keys color */", 
            "title": "Matrices"
        }, 
        {
            "location": "/widgets/matrices/#matrices", 
            "text": "Matrices are special containers that only contain one type of widget. All contained widgets will be traversed by single dragging gestures.", 
            "title": "Matrices"
        }, 
        {
            "location": "/widgets/matrices/#multifader", 
            "text": "Multifader creates a row of vertical faders that respond to the same gestures.  { \n     type : multifader , \n     // etc  }", 
            "title": "Multifader"
        }, 
        {
            "location": "/widgets/matrices/#strips", 
            "text": "type:  integer  default:  2  usage: number of faders in the row, each fader will inherit its parent's properties and the following ones (where  i  is the fader's index in the row)  id : same as the widget's with  /i  appended to it  label :  i  address : same as the widget's with  /i  appended to it", 
            "title": "strips"
        }, 
        {
            "location": "/widgets/matrices/#start", 
            "text": "type:  integer  default:  0  usage: first faders's index", 
            "title": "start"
        }, 
        {
            "location": "/widgets/matrices/#traversing", 
            "text": "type:  boolean  default:  true  usage: enable traversing gestures", 
            "title": "traversing"
        }, 
        {
            "location": "/widgets/matrices/#split", 
            "text": "type:  boolean  default:  false  usage: if  true , the fader's index will be appended to the widget's osc  address ; if  false  it will be prepended to the widget's  preArgs", 
            "title": "split"
        }, 
        {
            "location": "/widgets/matrices/#color", 
            "text": "type:  string|array  default:  auto , inherited accent color  usage: can be an  array  of css color  strings , which will be sequentially passed to the faders", 
            "title": "color"
        }, 
        {
            "location": "/widgets/matrices/#options", 
            "text": "see fader's  options", 
            "title": "options"
        }, 
        {
            "location": "/widgets/matrices/#multitoggle", 
            "text": "{ \n     type : multitoggle , \n     // etc  }", 
            "title": "Multitoggle"
        }, 
        {
            "location": "/widgets/matrices/#matrix", 
            "text": "type:  array  default:  [2,2]  usage: defines the number of columns and and rows. Each cell will contain a toggle button that will inherit its parent's properties and the following ones (where  i  is the fader's index in the row)  id : same as the widget's with  /i  appended to it  label :  i  address : same as the widget's with  /i  appended to it", 
            "title": "matrix"
        }, 
        {
            "location": "/widgets/matrices/#start_1", 
            "text": "type:  integer  default:  0  usage: first toggle's index", 
            "title": "start"
        }, 
        {
            "location": "/widgets/matrices/#spacing", 
            "text": "type:  integer  default:  0  usage: adds space between widgets", 
            "title": "spacing"
        }, 
        {
            "location": "/widgets/matrices/#traversing_1", 
            "text": "type:  boolean  default:  true  usage: enable traversing gestures", 
            "title": "traversing"
        }, 
        {
            "location": "/widgets/matrices/#split_1", 
            "text": "type:  boolean  default:  false  usage: if  true , the toggle's index will be appended to the widget's osc  address ; if  false  it will be prepended to the widget's  preArgs", 
            "title": "split"
        }, 
        {
            "location": "/widgets/matrices/#color_1", 
            "text": "type:  string|array  default:  auto , inherited accent color  usage: can be an  array  of css color  strings , which will be sequentially passed to the toggles", 
            "title": "color"
        }, 
        {
            "location": "/widgets/matrices/#options_1", 
            "text": "see toggle's  options", 
            "title": "options"
        }, 
        {
            "location": "/widgets/matrices/#multipush", 
            "text": "{ \n     type : multipush , \n     // etc  }", 
            "title": "Multipush"
        }, 
        {
            "location": "/widgets/matrices/#matrix_1", 
            "text": "type:  array  default:  [2,2]  usage: defines the number of columns and and rows. Each cell will contain a push button that will inherit its parent's properties and the following ones (where  i  is the fader's index in the row)  id : same as the widget's with  /i  appended to it  label :  i  address : same as the widget's with  /i  appended to it", 
            "title": "matrix"
        }, 
        {
            "location": "/widgets/matrices/#start_2", 
            "text": "type:  integer  default:  0  usage: first push's index", 
            "title": "start"
        }, 
        {
            "location": "/widgets/matrices/#spacing_1", 
            "text": "type:  integer  default:  0  usage: adds space between widgets", 
            "title": "spacing"
        }, 
        {
            "location": "/widgets/matrices/#traversing_2", 
            "text": "type:  boolean  default:  true  usage: enable traversing gestures", 
            "title": "traversing"
        }, 
        {
            "location": "/widgets/matrices/#split_2", 
            "text": "type:  boolean  default:  false  usage: if  true , the push's index will be appended to the widget's osc  address ; if  false  it will be prepended to the widget's  preArgs", 
            "title": "split"
        }, 
        {
            "location": "/widgets/matrices/#color_2", 
            "text": "type:  string|array  default:  auto , inherited accent color  usage: can be an  array  of css color  strings , which will be sequentially passed to the pushes", 
            "title": "color"
        }, 
        {
            "location": "/widgets/matrices/#options_2", 
            "text": "see push's  options", 
            "title": "options"
        }, 
        {
            "location": "/widgets/matrices/#keyboard", 
            "text": "This one works pretty much like the multipush, excepts it looks like a piano keyboard ad  { \n     type : keyboard , \n     // etc  }", 
            "title": "Keyboard"
        }, 
        {
            "location": "/widgets/matrices/#keys", 
            "text": "type:  integer  default:  24  usage: defines the number keys", 
            "title": "keys"
        }, 
        {
            "location": "/widgets/matrices/#start_3", 
            "text": "type:  integer  default:  60  usage: MIDI note number to start with (default is C4)", 
            "title": "start"
        }, 
        {
            "location": "/widgets/matrices/#traversing_3", 
            "text": "type:  boolean  default:  true  usage: enable traversing gestures", 
            "title": "traversing"
        }, 
        {
            "location": "/widgets/matrices/#split_3", 
            "text": "type:  boolean  default:  false  usage: if  true , the note's midi code will be appended to the widget's osc  address ; if  false  it will be prepended to the widget's  preArgs", 
            "title": "split"
        }, 
        {
            "location": "/widgets/matrices/#options_3", 
            "text": "see push's  options", 
            "title": "options"
        }, 
        {
            "location": "/widgets/matrices/#css", 
            "text": "--color-white:color; /* white keys color */\n--color-black:color; /* black keys color */", 
            "title": "css"
        }, 
        {
            "location": "/widgets/inputs/", 
            "text": "inputs\n\n\nInput\n\n\n{\n\n    \ntype\n:\ninput\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\neditable\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: set to \nfalse\n to make the input non-editable\n\n\n\n\nhorizontal\n\n\n\n\ntype: \nboolean\n\n\ndefault: \nfalse\n\n\nusage: set to \ntrue\n to display the input horizontally\n\n\n\n\nunit\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: \nunit\n will be appended to the displayed widget's value (it doesn't affect osc messages)\n\n\n\n\nKeys\n\n\n{\n\n    \ntype\n:\nkeys\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nwidgetId\n\n\n\n\ntype: \nobject\n\n\ndefault: \nempty\n\n\nusage: a widget's \nid\n whose value will be linked to the Keys\n\n\n\n\nbinding\n\n\n\n\ntype: \nstring|array\n\n\ndefault: \n''\n\n\nusage: \nkeyboardjs\n key combo string or array of strings.\n\n\n\n\nkeydown\n\n\n\n\ntype: \nstring\n\n\ndefault: \n''\n\n\nusage: \nMathJS\n expression whose output will be sent to the linked widget. This will be evaluated when the key combo is pressed. Available variables are ;\n\n\nvalue\n: widget's value\n\n\nkey\n: pressed key name (usefull for handling multiple keys with a single \nkeys\n widget)\n\n\nctrl\n: control key state\n\n\nalt\n: alt key state    \n\n\nshift\n: shift key state   \n\n\nsuper\n: command/windows key state   \n\n\n\n\nkeyup\n\n\n\n\ntype: \nstring\n\n\ndefault: \n''\n\n\nusage: same as \nkeydown\n, but evaluated when releasing the key combo.\n\n\n\n\nrepeat\n\n\n\n\ntype: \nboolean\n\n\ndefault: \ntrue\n\n\nusage: set to \nfalse\n to prevent \nkeydown\n repeats when holding the key combo pressed.", 
            "title": "Inputs"
        }, 
        {
            "location": "/widgets/inputs/#inputs", 
            "text": "", 
            "title": "inputs"
        }, 
        {
            "location": "/widgets/inputs/#input", 
            "text": "{ \n     type : input , \n     // etc  }", 
            "title": "Input"
        }, 
        {
            "location": "/widgets/inputs/#editable", 
            "text": "type:  boolean  default:  true  usage: set to  false  to make the input non-editable", 
            "title": "editable"
        }, 
        {
            "location": "/widgets/inputs/#horizontal", 
            "text": "type:  boolean  default:  false  usage: set to  true  to display the input horizontally", 
            "title": "horizontal"
        }, 
        {
            "location": "/widgets/inputs/#unit", 
            "text": "type:  string  default:  empty  usage:  unit  will be appended to the displayed widget's value (it doesn't affect osc messages)", 
            "title": "unit"
        }, 
        {
            "location": "/widgets/inputs/#keys", 
            "text": "{ \n     type : keys , \n     // etc  }", 
            "title": "Keys"
        }, 
        {
            "location": "/widgets/inputs/#widgetid", 
            "text": "type:  object  default:  empty  usage: a widget's  id  whose value will be linked to the Keys", 
            "title": "widgetId"
        }, 
        {
            "location": "/widgets/inputs/#binding", 
            "text": "type:  string|array  default:  ''  usage:  keyboardjs  key combo string or array of strings.", 
            "title": "binding"
        }, 
        {
            "location": "/widgets/inputs/#keydown", 
            "text": "type:  string  default:  ''  usage:  MathJS  expression whose output will be sent to the linked widget. This will be evaluated when the key combo is pressed. Available variables are ;  value : widget's value  key : pressed key name (usefull for handling multiple keys with a single  keys  widget)  ctrl : control key state  alt : alt key state      shift : shift key state     super : command/windows key state", 
            "title": "keydown"
        }, 
        {
            "location": "/widgets/inputs/#keyup", 
            "text": "type:  string  default:  ''  usage: same as  keydown , but evaluated when releasing the key combo.", 
            "title": "keyup"
        }, 
        {
            "location": "/widgets/inputs/#repeat", 
            "text": "type:  boolean  default:  true  usage: set to  false  to prevent  keydown  repeats when holding the key combo pressed.", 
            "title": "repeat"
        }, 
        {
            "location": "/widgets/maths/", 
            "text": "Maths\n\n\nMaths do the maths !\n\n\nFormula\n\n\n\n\nDeprecated\n\n\nSince \nv0.24.0\n, any widget property can be defined using math expressions. Formula widget is deprecated and will be removed in a future release.\n\n\n\n\nFormula evaluates mathematical expressions over other widgets' values each one of these widgets changes.\n\n\n{\n\n    \ntype\n:\nformula\n,\n\n    \n// etc\n\n\n}\n\n\n\n\n\nformula\n\n\n\n\ntype: \nstring\n\n\ndefault: \n''\n\n\nusage: a \nmathjs\n expression in which\n\n\n${id}\n will be replaced the \nid\n's value  \n\n\nexample: \n${fader_1} * 2 + ${fader_2}\n\n\n\n\n\n\nimportant note\n: contrary to what is stated in \nmathjs\n' documentation, \nmatrix indexes are zero-based\n here\n\n\n\n\ncondition\n\n\n\n\ntype: \nstring\n\n\ndefault: \n''\n\n\nusage:\n\n\na \nmathjs\n comparison expression that bypasses widget's osc sending when returning\nfalse\n\n\nexample: \n${fader_1} \n 0.5\n\n\n\n\n\n\n\n\nunit\n\n\n\n\ntype: \nstring\n\n\ndefault: \nempty\n\n\nusage: \nunit\n will be appended to the displayed widget's value (it doesn't affect osc messages)\n\n\n\n\nsplit\n\n\n\n\ntype: \nobject\n\n\ndefault: \n[]\n\n\nusage: specify a different \naddress\n for each item of the widget's value : \n['/a', '/b']\n\n\nnote: only use this is the formula return an \narray", 
            "title": "Maths"
        }, 
        {
            "location": "/widgets/maths/#maths", 
            "text": "Maths do the maths !", 
            "title": "Maths"
        }, 
        {
            "location": "/widgets/maths/#formula", 
            "text": "Deprecated  Since  v0.24.0 , any widget property can be defined using math expressions. Formula widget is deprecated and will be removed in a future release.   Formula evaluates mathematical expressions over other widgets' values each one of these widgets changes.  { \n     type : formula , \n     // etc  }", 
            "title": "Formula"
        }, 
        {
            "location": "/widgets/maths/#formula_1", 
            "text": "type:  string  default:  ''  usage: a  mathjs  expression in which  ${id}  will be replaced the  id 's value    example:  ${fader_1} * 2 + ${fader_2}    important note : contrary to what is stated in  mathjs ' documentation,  matrix indexes are zero-based  here", 
            "title": "formula"
        }, 
        {
            "location": "/widgets/maths/#condition", 
            "text": "type:  string  default:  ''  usage:  a  mathjs  comparison expression that bypasses widget's osc sending when returning false  example:  ${fader_1}   0.5", 
            "title": "condition"
        }, 
        {
            "location": "/widgets/maths/#unit", 
            "text": "type:  string  default:  empty  usage:  unit  will be appended to the displayed widget's value (it doesn't affect osc messages)", 
            "title": "unit"
        }, 
        {
            "location": "/widgets/maths/#split", 
            "text": "type:  object  default:  []  usage: specify a different  address  for each item of the widget's value :  ['/a', '/b']  note: only use this is the formula return an  array", 
            "title": "split"
        }, 
        {
            "location": "/extras/property-inheritance/", 
            "text": "Property inheritance\n\n\nWidgets can use each other's property values by using the following syntaxes:\n\n\n\n\n@{this.propertyName}\n\n\n@{parent.propertyName}\n\n\n@{widgetId.propertyName}\n (where \nwidgetId\n is the target widget's \nid\n)\n\n\n\n\n\n\nNote\n\n\nDon't use \nwidgetId\n when targetting \nthis\n or \nparent\n, it won't work.   \n\n\n\n\npropertyName\n can be any of the target widget's properties.\n\n\nIt can be used to:\n\n\n\n\nconcatenate strings: \n/@{parent.id}/some_suffix\n\n\ndefine object value:   \n[\n@{parent.id}\n]\n\n\n\n\nIf the retreived property is an object (\n[] / {}\n), a subset can be defined by appending a dot and a key (array index or object key) : \n@{parent.variables.key}\n\n\n\n\nThe root panel's \nid\n is \nroot\n.\n\n\n\n\nUse dynamic value\n\n\nThe special property name \n_value\nflash_on\n refers to a widget's value, as opposed to its \nvalue\n property.\n\n\nWhen omitted, the property name defaults to \n_value\n : \n@{widgetId}\n =\n \n@{widgetId._value}\n\n\nDynamic properties\n\n\nSome properties, when changed, trigger a complete widget recreation that ends any ongoing user interaction. Also, updating these properties continuously (e.g. when linked to a slider's dynamic value) can be very cpu expensive.\n\n\nSome properties have much cheaper update routines and can be considered as \ndynamic\n, as in performance safe. These properties are marked in the documentation with a \nflash_on\n.\n\n\nCircular references cases\n\n\n\n\ncontainer widgets can inherit their children's properties only to define \ndynamic\n properties\n\n\nwidgets can inherit their own \n_value\nflash_on\n property only to define \ndynamic\n properties", 
            "title": "Property inheritance"
        }, 
        {
            "location": "/extras/property-inheritance/#property-inheritance", 
            "text": "Widgets can use each other's property values by using the following syntaxes:   @{this.propertyName}  @{parent.propertyName}  @{widgetId.propertyName}  (where  widgetId  is the target widget's  id )    Note  Don't use  widgetId  when targetting  this  or  parent , it won't work.      propertyName  can be any of the target widget's properties.  It can be used to:   concatenate strings:  /@{parent.id}/some_suffix  define object value:    [ @{parent.id} ]   If the retreived property is an object ( [] / {} ), a subset can be defined by appending a dot and a key (array index or object key) :  @{parent.variables.key}   The root panel's  id  is  root .", 
            "title": "Property inheritance"
        }, 
        {
            "location": "/extras/property-inheritance/#use-dynamic-value", 
            "text": "The special property name  _value flash_on  refers to a widget's value, as opposed to its  value  property.  When omitted, the property name defaults to  _value  :  @{widgetId}  =   @{widgetId._value}", 
            "title": "Use dynamic value"
        }, 
        {
            "location": "/extras/property-inheritance/#dynamic-properties", 
            "text": "Some properties, when changed, trigger a complete widget recreation that ends any ongoing user interaction. Also, updating these properties continuously (e.g. when linked to a slider's dynamic value) can be very cpu expensive.  Some properties have much cheaper update routines and can be considered as  dynamic , as in performance safe. These properties are marked in the documentation with a  flash_on .", 
            "title": "Dynamic properties"
        }, 
        {
            "location": "/extras/property-inheritance/#circular-references-cases", 
            "text": "container widgets can inherit their children's properties only to define  dynamic  properties  widgets can inherit their own  _value flash_on  property only to define  dynamic  properties", 
            "title": "Circular references cases"
        }, 
        {
            "location": "/extras/property-maths/", 
            "text": "Property maths\n\n\nThe following syntax allow writing mathematical formulas in widgets' properties:\n\n\n#{ FORMULA }\n\n\n\n\nWhere FORMULA is a valid \nMathJS\n expression:\n\n\n\n\nsyntax documentation\n\n\navailable functions\n\n\navailable constants\n\n\nformulas can be \nmultiline\n\n\nproperty inheritance calls (\n@{...}\n) are always resolved before formulas\n\n\narrays / matrices indexes are \nzero-based\n (ie \n[\na\n,\nb\n][0]\n returns \na\n)\n\n\nstrings can be multiline when enclosed in backticks instead of double quotes (\n` `\n)\n\n\ninner closing brackets (\n}\n) must be escaped with a backslash (\n\\}\n)\n\n\n\n\nAdditionnal functions:\n\n\n\n\nunpack(x)\n: remove an array's brackets (\nunpack([1,2])\n returns \n1, 2\n)\n\n\npad(x, padding)\n: add leading zeros if the length the integer part of \nx\n is smaller than \npadding\n (\npad(1,2)\n returns \n01\n)\n\n\n\n\n\n\nA single widget property can contain multiple formulas. Variables and functions declared in a formula are available to subsequent formulas in the same property definition.", 
            "title": "Property maths"
        }, 
        {
            "location": "/extras/property-maths/#property-maths", 
            "text": "The following syntax allow writing mathematical formulas in widgets' properties:  #{ FORMULA }  Where FORMULA is a valid  MathJS  expression:   syntax documentation  available functions  available constants  formulas can be  multiline  property inheritance calls ( @{...} ) are always resolved before formulas  arrays / matrices indexes are  zero-based  (ie  [ a , b ][0]  returns  a )  strings can be multiline when enclosed in backticks instead of double quotes ( ` ` )  inner closing brackets ( } ) must be escaped with a backslash ( \\} )   Additionnal functions:   unpack(x) : remove an array's brackets ( unpack([1,2])  returns  1, 2 )  pad(x, padding) : add leading zeros if the length the integer part of  x  is smaller than  padding  ( pad(1,2)  returns  01 )    A single widget property can contain multiple formulas. Variables and functions declared in a formula are available to subsequent formulas in the same property definition.", 
            "title": "Property maths"
        }, 
        {
            "location": "/extras/theming/", 
            "text": "Theming\n\n\nTheming is as simple as writing a tiny css file that will override the default style variables defined in \n_vars.scss\n :\n\n\n:\nroot\n \n{\n\n    \n--\ncolor-accent\n:\nred\n;\n\n\n}\n\n\n\n\n\nThis will change the default accent color to red. Variables can also be overridden for a specific subset of elements, for example :\n\n\n.\npanel-container\n \n{\n\n    \n--\ncolor-text\n:\nblue\n;\n\n\n}\n\n\n\n\n\nThis will change the default text color to blue for all elements in panel widgets.\n\n\nOf course, regular css is also allowed :\n\n\n.\nwidget\n \n.\ninput\n \n{\n\n    \ndisplay\n:\n \nnone\n;\n\n\n}\n\n\n\n\n\nThis will hide the widgets' value inputs.", 
            "title": "Theming"
        }, 
        {
            "location": "/extras/theming/#theming", 
            "text": "Theming is as simple as writing a tiny css file that will override the default style variables defined in  _vars.scss  :  : root   { \n     -- color-accent : red ;  }   This will change the default accent color to red. Variables can also be overridden for a specific subset of elements, for example :  . panel-container   { \n     -- color-text : blue ;  }   This will change the default text color to blue for all elements in panel widgets.  Of course, regular css is also allowed :  . widget   . input   { \n     display :   none ;  }   This will hide the widgets' value inputs.", 
            "title": "Theming"
        }, 
        {
            "location": "/extras/url-options/", 
            "text": "URL Options\n\n\nClient specific options can be set by adding query parameters to the server's url. One must prepend the url with a question mark (\n?\n) followed by \nparameter=value\n pairs separated with ampersands (\n).\n\n\n\n\n\n\n\n\nOption\n\n\nValue\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhdpi\n\n\n1 / 0\n\n\n0\n\n\nenable high resolution canvas\n\n\n\n\n\n\nforceHdpi\n\n\nnumber\n\n\n0\n\n\nforce canvas scaling (ignore \nhdpi\n)\n\n\n\n\n\n\ndoubletab\n\n\nnumber\n\n\n375\n\n\nsets the double tap/click time thershold in milliseconds\n\n\n\n\n\n\nzoom\n\n\nnumber\n\n\n1\n\n\nsets the initial zoom\n\n\n\n\n\n\nframerate\n\n\nnumber\n\n\n60\n\n\nlimit canvas drawing framerate\n\n\n\n\n\n\n\n\nExample:\n\n\nhttp://server-ip:port?hdpi=1\n\n\n\n\nWhen using the built-in client, url options can be set through the \n--url-options\n switch.\n\n\nExample: \nopen-stage-control --url-options zoom=2 doubletap=200", 
            "title": "URL options"
        }, 
        {
            "location": "/extras/url-options/#url-options", 
            "text": "Client specific options can be set by adding query parameters to the server's url. One must prepend the url with a question mark ( ? ) followed by  parameter=value  pairs separated with ampersands ( ).     Option  Value  Default  Description      hdpi  1 / 0  0  enable high resolution canvas    forceHdpi  number  0  force canvas scaling (ignore  hdpi )    doubletab  number  375  sets the double tap/click time thershold in milliseconds    zoom  number  1  sets the initial zoom    framerate  number  60  limit canvas drawing framerate     Example:  http://server-ip:port?hdpi=1   When using the built-in client, url options can be set through the  --url-options  switch.  Example:  open-stage-control --url-options zoom=2 doubletap=200", 
            "title": "URL Options"
        }, 
        {
            "location": "/extras/remote-control/", 
            "text": "Remote control\n\n\nAll widgets that send osc messages respond to the same messages. Additionnaly, Open Stage Control responds to some general osc commands.\n\n\n/EDIT id options\n\n\nApply a set of options to an existing widget by replacing the old ones with the new ones.\n\n\n\n\nid\n: \nstring\n, widget's \nid\n\n\noptions\n: \nstring\n, \nJSON5\n stringified object defining the new properties to merge\n\n\nexample: \n{\nlabel\n:\nNew Label\n, \ncolor\n:\nred\n}\n\n\n\n\n\n\nEditing a widget can be cpu expensive, hence updating the UI continuously is not a good idea\n\n\n\n\n/EDIT/MERGE id options\n\n\nApply a set of options to an existing widget by merging them to the widget's options.  \n\n\n\n\nid\n: \nstring\n, widget's \nid\n\n\noptions\n: \nstring\n, \nJSON5\n stringified object defining the new properties to merge\n\n\nexample: \n{\nlabel\n:\nNew Label\n, \ncolor\n:\nred\n}\n\n\n\n\n\n\nEditing a widget can be cpu expensive, hence updating the UI continuously is not a good idea\n\n\n\n\n/EDIT/GET target id\n\n\nSends back a widget's data (JSON stringified object), including its children, to specified target.\n\n\n\n\ntarget\n: \nstring\n, \nip:port\n pair\n\n\nid\n: \nstring\n, widget's \nid\n\n\n\n\nReturns \n/EDIT/GET id data\n\n\n\n\nid\n: \nstring\n\n\ndata\n: \nstring\n\n\n\n\n/EDIT/GET target address preArg1 preArg2 ...\n\n\nSends back a widget's data (JSON stringified object), including its children, to specified target.\n\n\n\n\ntarget\n: \nstring\n, \nip:port\n pair\n\n\naddress\n: \nstring\n, widget's \naddress\n\n\npreArg[1...]\n: \n*\n, widget's \npreArgs\n\n\n\n\nReturns \n/EDIT/GET address preArg1 preArg2 ... data\n\n\n\n\naddress\n: \nstring\n, widget's \naddress\n\n\npreArg[1...]\n: \n*\n, widget's \npreArgs\n\n\ndata\n: \nstring\n\n\n\n\n/GET target id\n\n\nSends back a widget's value to specified target.\n\n\n\n\ntarget\n: \nstring\n, \nip:port\n pair\n\n\nid\n: \nstring\n, widget's \nid\n\n\n\n\nReturns \n/GET id value\n\n\n\n\nid\n: \nstring\n\n\nvalue\n: \n*\n\n\n\n\n/GET target address preArg1 preArg2 ...\n\n\nSends back a widget's value to specified target.\n\n\n\n\ntarget\n: \nstring\n, \nip:port\n pair\n\n\naddress\n: \nstring\n, widget's \naddress\n\n\npreArg[1...]\n: \n*\n, widget's \npreArgs\n\n\n\n\nReturns \n/GET address preArg1 preArg2 ... value\n\n\n\n\naddress\n: \nstring\n, widget's \naddress\n\n\npreArg[1...]\n: \n*\n, widget's \npreArgs\n\n\nvalue\n: \n*\n\n\n\n\n/SET target id value\n\n\nSet a widget's value as if it was interacted with from the interface. This is likely to make it send its value.\n\n\n\n\nid\n: \nstring\n, widget's \nid\n\n\nvalue\n: \n*\n, widget's new value\n\n\n\n\n/SET address preArg1 preArg2 ... value\n\n\nSet a widget's value as if it was interacted with from the interface. This is likely to make it send its value.\n\n\n\n\naddress\n: \nstring\n, widget's \naddress\n\n\npreArg[1...]\n: \n*\n, widget's \npreArgs\n\n\nvalue\n: \n*\n, widget's new value\n\n\n\n\n/TABS id id etc\n\n\nOpen the tabs designated by the \nid\n parameters. The target tab link must be accesible (opening a tab located in a disabled tab won't work unless you specify the parent tab's \nid\n before; the safest way to go is to pass the whole tab tree to enable).", 
            "title": "Remote control"
        }, 
        {
            "location": "/extras/remote-control/#remote-control", 
            "text": "All widgets that send osc messages respond to the same messages. Additionnaly, Open Stage Control responds to some general osc commands.", 
            "title": "Remote control"
        }, 
        {
            "location": "/extras/remote-control/#edit-id-options", 
            "text": "Apply a set of options to an existing widget by replacing the old ones with the new ones.   id :  string , widget's  id  options :  string ,  JSON5  stringified object defining the new properties to merge  example:  { label : New Label ,  color : red }    Editing a widget can be cpu expensive, hence updating the UI continuously is not a good idea", 
            "title": "/EDIT id options"
        }, 
        {
            "location": "/extras/remote-control/#editmerge-id-options", 
            "text": "Apply a set of options to an existing widget by merging them to the widget's options.     id :  string , widget's  id  options :  string ,  JSON5  stringified object defining the new properties to merge  example:  { label : New Label ,  color : red }    Editing a widget can be cpu expensive, hence updating the UI continuously is not a good idea", 
            "title": "/EDIT/MERGE id options"
        }, 
        {
            "location": "/extras/remote-control/#editget-target-id", 
            "text": "Sends back a widget's data (JSON stringified object), including its children, to specified target.   target :  string ,  ip:port  pair  id :  string , widget's  id   Returns  /EDIT/GET id data   id :  string  data :  string", 
            "title": "/EDIT/GET target id"
        }, 
        {
            "location": "/extras/remote-control/#editget-target-address-prearg1-prearg2", 
            "text": "Sends back a widget's data (JSON stringified object), including its children, to specified target.   target :  string ,  ip:port  pair  address :  string , widget's  address  preArg[1...] :  * , widget's  preArgs   Returns  /EDIT/GET address preArg1 preArg2 ... data   address :  string , widget's  address  preArg[1...] :  * , widget's  preArgs  data :  string", 
            "title": "/EDIT/GET target address preArg1 preArg2 ..."
        }, 
        {
            "location": "/extras/remote-control/#get-target-id", 
            "text": "Sends back a widget's value to specified target.   target :  string ,  ip:port  pair  id :  string , widget's  id   Returns  /GET id value   id :  string  value :  *", 
            "title": "/GET target id"
        }, 
        {
            "location": "/extras/remote-control/#get-target-address-prearg1-prearg2", 
            "text": "Sends back a widget's value to specified target.   target :  string ,  ip:port  pair  address :  string , widget's  address  preArg[1...] :  * , widget's  preArgs   Returns  /GET address preArg1 preArg2 ... value   address :  string , widget's  address  preArg[1...] :  * , widget's  preArgs  value :  *", 
            "title": "/GET target address preArg1 preArg2 ..."
        }, 
        {
            "location": "/extras/remote-control/#set-target-id-value", 
            "text": "Set a widget's value as if it was interacted with from the interface. This is likely to make it send its value.   id :  string , widget's  id  value :  * , widget's new value", 
            "title": "/SET target id value"
        }, 
        {
            "location": "/extras/remote-control/#set-address-prearg1-prearg2-value", 
            "text": "Set a widget's value as if it was interacted with from the interface. This is likely to make it send its value.   address :  string , widget's  address  preArg[1...] :  * , widget's  preArgs  value :  * , widget's new value", 
            "title": "/SET address preArg1 preArg2 ... value"
        }, 
        {
            "location": "/extras/remote-control/#tabs-id-id-etc", 
            "text": "Open the tabs designated by the  id  parameters. The target tab link must be accesible (opening a tab located in a disabled tab won't work unless you specify the parent tab's  id  before; the safest way to go is to pass the whole tab tree to enable).", 
            "title": "/TABS id id etc"
        }, 
        {
            "location": "/extras/custom-module/", 
            "text": "Custom module\n\n\nUsing the \n-c / --custom-module\n command-line switch, users can load a javascript file to tune the way Open Stage Control behaves regarding osc.\n\n\nIt must be of the following form:\n\n\n(\nfunction\n(){\n\n\n    \n// Do whatever you want, initialize some variables, declare some functions, ...\n\n\n    \nreturn\n \n{\n\n        \ninit\n:\n \nfunction\n(){\n\n            \n// this will be executed once when the osc server starts\n\n        \n},\n\n        \noscInFilter\n:\nfunction\n(\ndata\n){\n\n            \n// Filter incomming osc messages\n\n\n            \nvar\n \n{\naddress\n,\n \nargs\n,\n \nhost\n,\n \nport\n}\n \n=\n \ndata\n\n\n            \n// do what you want\n\n\n            \n// address = string\n\n            \n// args = array of {value, type} objects\n\n            \n// host = string\n\n            \n// port = integer\n\n\n            \n// return data if you want the message to be processed\n\n            \nreturn\n \n{\naddress\n,\n \nargs\n,\n \nhost\n,\n \nport\n}\n\n\n        \n},\n\n        \noscOutFilter\n:\nfunction\n(\ndata\n){\n\n            \n// Filter outgoing osc messages\n\n\n            \nvar\n \n{\naddress\n,\n \nargs\n,\n \nhost\n,\n \nport\n}\n \n=\n \ndata\n\n\n            \n// same as oscInFilter\n\n\n            \n// return data if you want the message to be and sent\n\n            \nreturn\n \n{\naddress\n,\n \nargs\n,\n \nhost\n,\n \nport\n}\n\n        \n}\n\n    \n}\n\n\n\n})()\n\n\n\n\n\nThe module is executed in a restricted context, only a few globals are available :\n\n\n\n\nconsole\n: \nobject\n\n\nsendOsc\n: \nfunction({address, args, host, port})\n\n\nreceiveOsc\n: \nfunction({address, args, host, port})\n\n\nsetTimeout\n: \nfunction(function, delay)\n\n\n\n\nsendOsc\n and \nreceiveOsc\n expect arguments formatted as follow:\n\n\n\n\naddress\n: \nstring\n\n\nargs\n: \narray\n of \n{type:\nOSC_TYPE_LETTER\n, value:VALUE}\n \nobjects\n\n\nhost\n: \nstring\n ip address, valid hostname or \nmidi\n\n\nport\n: \ninteger\n port number or \nstring\n midi device name", 
            "title": "Custom module"
        }, 
        {
            "location": "/extras/custom-module/#custom-module", 
            "text": "Using the  -c / --custom-module  command-line switch, users can load a javascript file to tune the way Open Stage Control behaves regarding osc.  It must be of the following form:  ( function (){ \n\n     // Do whatever you want, initialize some variables, declare some functions, ... \n\n     return   { \n         init :   function (){ \n             // this will be executed once when the osc server starts \n         }, \n         oscInFilter : function ( data ){ \n             // Filter incomming osc messages \n\n             var   { address ,   args ,   host ,   port }   =   data \n\n             // do what you want \n\n             // address = string \n             // args = array of {value, type} objects \n             // host = string \n             // port = integer \n\n             // return data if you want the message to be processed \n             return   { address ,   args ,   host ,   port } \n\n         }, \n         oscOutFilter : function ( data ){ \n             // Filter outgoing osc messages \n\n             var   { address ,   args ,   host ,   port }   =   data \n\n             // same as oscInFilter \n\n             // return data if you want the message to be and sent \n             return   { address ,   args ,   host ,   port } \n         } \n     }  })()   The module is executed in a restricted context, only a few globals are available :   console :  object  sendOsc :  function({address, args, host, port})  receiveOsc :  function({address, args, host, port})  setTimeout :  function(function, delay)   sendOsc  and  receiveOsc  expect arguments formatted as follow:   address :  string  args :  array  of  {type: OSC_TYPE_LETTER , value:VALUE}   objects  host :  string  ip address, valid hostname or  midi  port :  integer  port number or  string  midi device name", 
            "title": "Custom module"
        }, 
        {
            "location": "/extras/midi/", 
            "text": "Sending / Receiving MIDI\n\n\nOpen Stage Control can send and receive MIDI messages.\n\n\nRequirements\n\n\nMIDI support requires additional software to be installed on the server's system:\n\n\n\n\npython (2 / 3)\n\n\npython package \nrtmidi\n (version 2.3.2, compiled with \n--jack-midi\n flag for JACK MIDI support)\n\n\n\n\n\n\nWhy an additionnal dependency ?\n\n\nProviding cross-platform MIDI support is not trivial, as it requires OS-specific compilation that cannot be automated within Open Stage Control's current packaging workflow. Using a python addon seems to be the best compromise so far : the core app remains easy to build, and the extra dependency is easy to install.\n\n\n\n\nSetup\n\n\nWhen running the app, the \n-m / --midi\n switch must be set; it accepts the following options (separated by spaces):\n\n\n\n\nlist\n: prints the available MIDI ports to the console; numbers in the first column may be used for \ninput\n/\noutput\n definition below\n\n\ndevice_name:input,output\n: connect to midi ports \ninput\n and \noutput\n; osc messages sent to target \nmidi:device_name\n will be processed as midi events; Multiple devices can be declared\n\n\n\n\nLinux only:\n\n\n\n\ndevice_name:virtual\n: creates a virtual midi device with one input port and one output port\n\n\njack\n: use JACK MIDI instead of ALSA (add as extra parameter)\n\n\n\n\nWidget settings\n\n\nIn order to send MIDI messages, a widget must have at least one \ntarget\n formatted as follows:\n\n\nmidi:device_name\n (where \ndevice_name\n is one of the declared midi devices)\n\n\nSupported MIDI messages\n\n\n\n\nDefine static argument values using the \npreArgs\n option in order to complete the respective MIDI message.\n\n\n\n\n/note channel note velocity\n\n\nNoteOn event or noteOff if velocity equals \n0\n.\n\n\n\n\nchannel\n: integer between 1 and 16\n\n\nnote\n: integer between 0 and 127\n\n\nvelocity\n: integer between 0 and 127\n\n\n\n\nExample:\n\n\nA push button might be configured as follows in order to send a MIDI note whose velocity is defined by the button's on/off value:\n\n\n\n\naddress\n: /note\n\n\npreArgs\n: [1, 60] (for MIDI channel 1, and note 60 / C3)\n\n\non\n: 100 (for noteOn velocity of 100 on button push)\n\n\noff\n: 0 (to send a noteOff on button release)\n\n\ntarget\n: [\"midi:device_name\"] (where device_name is one of the declared midi devices defined during \nsetup\n)\n\n\n\n\n/control channel cc value\n\n\nControl change event.\n\n\n\n\nchannel\n: integer between 1 and 16\n\n\ncc\n: integer between 0 and 127\n\n\nvalue\n: integer between 0 and 127\n\n\n\n\nExample:\n\n\nA fader might be configured as follows in order to send a MIDI control message (a volume control in this example):\n\n\n\n\naddress\n: /control\n\n\npre-args\n: [1, 7] (MIDI channel 1, control number 7 generally used as volume control)\n\n\nrange\n: {\"min\": 0, \"max\": 127} (MIDI values are encoded in this range)\n\n\ntarget\n: [\"midi:device_name\"]\n\n\n\n\n/program channel program\n\n\nProgram change event.\n\n\n\n\nchannel\n: integer between 1 and 16\n\n\nprogram\n: integer between 0 and 127\n\n\n\n\n/pitch channel pitch\n\n\nPitchWheel event.\n\n\n\n\nchannel\n: integer between 1 and 16\n\n\npitch\n: integer between 0 and 16383\n\n\n\n\n/sysex msg v1 .. vN\n\n\nSystem exclusive message.\n\n\n\n\nmsg\n: hexadecimal sysex data string of the form \nf0 ... f7\n. You may include placeholders of the form \nnn\n which will be replaced by \nv1, .., vN\n respectively.\n\n\nv1, .., vN\n: values encoded as hexadecimal data strings to include in \nmsg\n. Most probably, you will need to sepcify a \ncustom module\n in order to convert numeric widget values into the required hexadecimal format. In general, this conversion will be different for each manufacturer / device.\n\n\n\n\nFor a very simple example, refer to session 'sysex.json' found in the application's sub folder 'resources/app/examples/'. Please remember to adjust the button's \ntarget\n to the \ndevice_name\n used in your MIDI setup.", 
            "title": "Midi"
        }, 
        {
            "location": "/extras/midi/#sending-receiving-midi", 
            "text": "Open Stage Control can send and receive MIDI messages.", 
            "title": "Sending / Receiving MIDI"
        }, 
        {
            "location": "/extras/midi/#requirements", 
            "text": "MIDI support requires additional software to be installed on the server's system:   python (2 / 3)  python package  rtmidi  (version 2.3.2, compiled with  --jack-midi  flag for JACK MIDI support)    Why an additionnal dependency ?  Providing cross-platform MIDI support is not trivial, as it requires OS-specific compilation that cannot be automated within Open Stage Control's current packaging workflow. Using a python addon seems to be the best compromise so far : the core app remains easy to build, and the extra dependency is easy to install.", 
            "title": "Requirements"
        }, 
        {
            "location": "/extras/midi/#setup", 
            "text": "When running the app, the  -m / --midi  switch must be set; it accepts the following options (separated by spaces):   list : prints the available MIDI ports to the console; numbers in the first column may be used for  input / output  definition below  device_name:input,output : connect to midi ports  input  and  output ; osc messages sent to target  midi:device_name  will be processed as midi events; Multiple devices can be declared   Linux only:   device_name:virtual : creates a virtual midi device with one input port and one output port  jack : use JACK MIDI instead of ALSA (add as extra parameter)", 
            "title": "Setup"
        }, 
        {
            "location": "/extras/midi/#widget-settings", 
            "text": "In order to send MIDI messages, a widget must have at least one  target  formatted as follows:  midi:device_name  (where  device_name  is one of the declared midi devices)", 
            "title": "Widget settings"
        }, 
        {
            "location": "/extras/midi/#supported-midi-messages", 
            "text": "Define static argument values using the  preArgs  option in order to complete the respective MIDI message.", 
            "title": "Supported MIDI messages"
        }, 
        {
            "location": "/extras/midi/#note-channel-note-velocity", 
            "text": "NoteOn event or noteOff if velocity equals  0 .   channel : integer between 1 and 16  note : integer between 0 and 127  velocity : integer between 0 and 127   Example:  A push button might be configured as follows in order to send a MIDI note whose velocity is defined by the button's on/off value:   address : /note  preArgs : [1, 60] (for MIDI channel 1, and note 60 / C3)  on : 100 (for noteOn velocity of 100 on button push)  off : 0 (to send a noteOff on button release)  target : [\"midi:device_name\"] (where device_name is one of the declared midi devices defined during  setup )", 
            "title": "/note channel note velocity"
        }, 
        {
            "location": "/extras/midi/#control-channel-cc-value", 
            "text": "Control change event.   channel : integer between 1 and 16  cc : integer between 0 and 127  value : integer between 0 and 127   Example:  A fader might be configured as follows in order to send a MIDI control message (a volume control in this example):   address : /control  pre-args : [1, 7] (MIDI channel 1, control number 7 generally used as volume control)  range : {\"min\": 0, \"max\": 127} (MIDI values are encoded in this range)  target : [\"midi:device_name\"]", 
            "title": "/control channel cc value"
        }, 
        {
            "location": "/extras/midi/#program-channel-program", 
            "text": "Program change event.   channel : integer between 1 and 16  program : integer between 0 and 127", 
            "title": "/program channel program"
        }, 
        {
            "location": "/extras/midi/#pitch-channel-pitch", 
            "text": "PitchWheel event.   channel : integer between 1 and 16  pitch : integer between 0 and 16383", 
            "title": "/pitch channel pitch"
        }, 
        {
            "location": "/extras/midi/#sysex-msg-v1-vn", 
            "text": "System exclusive message.   msg : hexadecimal sysex data string of the form  f0 ... f7 . You may include placeholders of the form  nn  which will be replaced by  v1, .., vN  respectively.  v1, .., vN : values encoded as hexadecimal data strings to include in  msg . Most probably, you will need to sepcify a  custom module  in order to convert numeric widget values into the required hexadecimal format. In general, this conversion will be different for each manufacturer / device.   For a very simple example, refer to session 'sysex.json' found in the application's sub folder 'resources/app/examples/'. Please remember to adjust the button's  target  to the  device_name  used in your MIDI setup.", 
            "title": "/sysex msg v1 .. vN"
        }, 
        {
            "location": "/examples/", 
            "text": "Community examples\n\n\nFeel free to submitt you own by \nopening an issue\n on github.\n\n\nArdour Control\n\n\nhttps://github.com/jean-emmanuel/ardour-control\n\n\n\n\nReaper panels\n\n\nhttps://github.com/ThrashJazzAssassin/REAPER-OSC-panels", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#community-examples", 
            "text": "Feel free to submitt you own by  opening an issue  on github.", 
            "title": "Community examples"
        }, 
        {
            "location": "/examples/#ardour-control", 
            "text": "https://github.com/jean-emmanuel/ardour-control", 
            "title": "Ardour Control"
        }, 
        {
            "location": "/examples/#reaper-panels", 
            "text": "https://github.com/ThrashJazzAssassin/REAPER-OSC-panels", 
            "title": "Reaper panels"
        }, 
        {
            "location": "/credits/", 
            "text": "License\n\n\nCopyleft \u00a9 Jean-Emmanuel Doucet @ \nAMMD\n 2018.\nThis program is a free software released under the \nGNU/GPL3\n license.\n\n\nDependencies\n\n\nOpen Stage Control relies on several other free softwares, including \nNode.js\n, \nElectron\n, \nosc.js\n, \nbabel\n, \nbrowserify\n, \nexorcist\n, \nexpress\n, \nnode-sass\n, \njQuery\n, \njQuery-UI\n, \nFont Awesome\n, \nstacktracejs\n, \nmathjs\n. A comprehensive and up-to-date list can be found by reading these \ntwo\n \nfiles\n.\n\n\nContributors\n\n\nhttps://github.com/jean-emmanuel/open-stage-control/graphs/contributors\n\n\n\n\n\n\n\n\n\n\nBrowserStack helps debugging Open Stage Control by providing a complete suite of browser emulators for Android, iOS and Windows, how awesome is that ? \nQuite very much indeed !", 
            "title": "Credits"
        }, 
        {
            "location": "/credits/#license", 
            "text": "Copyleft \u00a9 Jean-Emmanuel Doucet @  AMMD  2018.\nThis program is a free software released under the  GNU/GPL3  license.", 
            "title": "License"
        }, 
        {
            "location": "/credits/#dependencies", 
            "text": "Open Stage Control relies on several other free softwares, including  Node.js ,  Electron ,  osc.js ,  babel ,  browserify ,  exorcist ,  express ,  node-sass ,  jQuery ,  jQuery-UI ,  Font Awesome ,  stacktracejs ,  mathjs . A comprehensive and up-to-date list can be found by reading these  two   files .", 
            "title": "Dependencies"
        }, 
        {
            "location": "/credits/#contributors", 
            "text": "https://github.com/jean-emmanuel/open-stage-control/graphs/contributors      BrowserStack helps debugging Open Stage Control by providing a complete suite of browser emulators for Android, iOS and Windows, how awesome is that ?  Quite very much indeed !", 
            "title": "Contributors"
        }
    ]
}